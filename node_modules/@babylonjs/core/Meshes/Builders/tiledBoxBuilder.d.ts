import { Nullable } from "../../types";
import { Scene } from "../../scene";
import { Vector4 } from "../../Maths/math.vector";
import { Color4 } from '../../Maths/math.color';
import { Mesh } from "../mesh";
import { VertexData } from "../mesh.vertexData";
/**
 * Creates the VertexData for a tiled box
 * @param options an object used to set the following optional parameters for the box, required but can be empty
  * * faceTiles sets the pattern, tile size and number of tiles for a face
  * * faceUV an array of 6 Vector4 elements used to set different images to each box side
  * * faceColors an array of 6 Color3 elements used to set different colors to each box side
  * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE
 * @returns the VertexData of the box
 */
export declare function CreateTiledBoxVertexData(options: {
    pattern?: number;
    size?: number;
    width?: number;
    height?: number;
    depth?: number;
    tileSize?: number;
    tileWidth?: number;
    tileHeight?: number;
    faceUV?: Vector4[];
    faceColors?: Color4[];
    alignHorizontal?: number;
    alignVertical?: number;
    sideOrientation?: number;
}): VertexData;
/**
 * Creates a box mesh
 * faceTiles sets the pattern, tile size and number of tiles for a face     * * You can set different colors and different images to each box side by using the parameters `faceColors` (an array of 6 Color3 elements) and `faceUV` (an array of 6 Vector4 elements)
 * * Please read this tutorial : https://doc.babylonjs.com/how_to/createbox_per_face_textures_and_colors
 * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE
 * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation
 * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created
 * @param name defines the name of the mesh
 * @param options defines the options used to create the mesh
 * @param scene defines the hosting scene
 * @returns the box mesh
 */
export declare function CreateTiledBox(name: string, options: {
    pattern?: number;
    width?: number;
    height?: number;
    depth?: number;
    tileSize?: number;
    tileWidth?: number;
    tileHeight?: number;
    alignHorizontal?: number;
    alignVertical?: number;
    faceUV?: Vector4[];
    faceColors?: Color4[];
    sideOrientation?: number;
    updatable?: boolean;
}, scene?: Nullable<Scene>): Mesh;
/**
 * Class containing static functions to help procedurally build meshes
 * @deprecated use CreateTildeBox instead
 */
export declare const TiledBoxBuilder: {
    CreateTiledBox: typeof CreateTiledBox;
};
