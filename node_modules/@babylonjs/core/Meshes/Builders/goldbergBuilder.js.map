{"version":3,"file":"goldbergBuilder.js","sourceRoot":"","sources":["../../../../sourceES6/core/Meshes/Builders/goldbergBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import { Scene } from \"../../scene\";\r\nimport { Vector3, Vector2 } from \"../../Maths/math.vector\";\r\nimport { Color4 } from '../../Maths/math.color';\r\nimport { Mesh } from \"../../Meshes/mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport { Nullable, FloatArray, IndicesArray } from '../../types';\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport { _PrimaryIsoTriangle, GeodesicData, PolyhedronData } from \"../geodesicMesh\";\r\nimport { VertexBuffer } from \"../../Buffers/buffer\";\r\n\r\n/**\r\n * Creates the Mesh for a Goldberg Polyhedron\r\n * @param name defines the name of the mesh\r\n * @param options an object used to set the following optional parameters for the polyhedron, required but can be empty\r\n * * m number of horizontal steps along an isogrid\r\n * * n number of angled steps along an isogrid\r\n * * size the size of the Goldberg, optional default 1\r\n * * sizeX allows stretching in the x direction, optional, default size\r\n * * sizeY allows stretching in the y direction, optional, default size\r\n * * sizeZ allows stretching in the z direction, optional, default size\r\n * * faceUV an array of Vector4 elements used to set different images to the top, rings and bottom respectively\r\n * * faceColors an array of Color3 elements used to set different colors to the top, rings and bottom respectively\r\n * * subdivisions increasing the subdivisions increases the number of faces, optional, default 4\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @param goldBergData polyhedronData defining the Goldberg polyhedron\r\n * @returns GoldbergSphere mesh\r\n */\r\nexport function CreateGoldbergVertexData(options: { size?: number, sizeX?: number, sizeY?: number, sizeZ?: number, sideOrientation?: number }, goldbergData: PolyhedronData): VertexData {\r\n\r\n    const size = options.size;\r\n    const sizeX: number = options.sizeX || size || 1;\r\n    const sizeY: number = options.sizeY || size || 1;\r\n    const sizeZ: number = options.sizeZ || size || 1;\r\n    const sideOrientation = (options.sideOrientation === 0) ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\r\n\r\n    const positions = new Array<number>();\r\n    const indices = new Array<number>();\r\n    const normals = new Array<number>();\r\n    const uvs = new Array<number>();\r\n\r\n    let minX = Infinity;\r\n    let maxX = -Infinity;\r\n    let minY = Infinity;\r\n    let maxY = -Infinity;\r\n\r\n    for (let v = 0; v < goldbergData.vertex.length; v++) {\r\n        minX = Math.min(minX, goldbergData.vertex[v][0] * sizeX);\r\n        maxX = Math.max(maxX, goldbergData.vertex[v][0] * sizeX);\r\n        minY = Math.min(minY, goldbergData.vertex[v][1] * sizeY);\r\n        maxY = Math.max(maxY, goldbergData.vertex[v][1] * sizeY);\r\n    }\r\n\r\n    let index: number = 0;\r\n    for (let f = 0; f < goldbergData.face.length; f++) {\r\n        const verts = goldbergData.face[f];\r\n        const a = Vector3.FromArray(goldbergData.vertex[verts[0]]);\r\n        const b = Vector3.FromArray(goldbergData.vertex[verts[2]]);\r\n        const c = Vector3.FromArray(goldbergData.vertex[verts[1]]);\r\n        const ba = b.subtract(a);\r\n        const ca = c.subtract(a);\r\n        const norm = Vector3.Cross(ca, ba).normalize();\r\n        for (let v = 0; v < verts.length; v++) {\r\n            normals.push(norm.x, norm.y, norm.z);\r\n            const pdata = goldbergData.vertex[verts[v]];\r\n            positions.push(pdata[0] * sizeX, pdata[1] * sizeY, pdata[2] * sizeZ);\r\n            uvs.push((pdata[0] * sizeX - minX) / (maxX - minX), (pdata[1] * sizeY - minY) / (maxY - minY));\r\n        }\r\n        for (let v = 0; v < verts.length - 2; v++) {\r\n            indices.push(index, index + v + 2, index + v + 1);\r\n        }\r\n        index += verts.length;\r\n    }\r\n\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs);\r\n\r\n    const vertexData = new VertexData();\r\n    vertexData.positions = positions;\r\n    vertexData.indices = indices;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates the Mesh for a Goldberg Polyhedron which is made from 12 pentagonal and the rest hexagonal faces\r\n * @see https://en.wikipedia.org/wiki/Goldberg_polyhedron\r\n * @param name defines the name of the mesh\r\n * @param options an object used to set the following optional parameters for the polyhedron, required but can be empty\r\n * * m number of horizontal steps along an isogrid\r\n * * n number of angled steps along an isogrid\r\n * * size the size of the Goldberg, optional default 1\r\n * * sizeX allows stretching in the x direction, optional, default size\r\n * * sizeY allows stretching in the y direction, optional, default size\r\n * * sizeZ allows stretching in the z direction, optional, default size\r\n * * updatable defines if the mesh must be flagged as updatable\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * @param scene defines the hosting scene\r\n * @returns Goldberg mesh\r\n */\r\nexport function CreateGoldberg(name: string, options: { m?: number, n?: number, size?: number, sizeX?: number, sizeY?: number, sizeZ?: number, updatable?: boolean, sideOrientation?: number }, scene: Nullable<Scene> = null): Mesh {\r\n    let m: number = options.m || 1;\r\n    if (m !== Math.floor(m)) {\r\n        m === Math.floor(m);\r\n        Logger.Warn(\"m not an integer only floor(m) used\");\r\n    }\r\n    let n: number = options.n || 0;\r\n    if (n !== Math.floor(n)) {\r\n        n === Math.floor(n);\r\n        Logger.Warn(\"n not an integer only floor(n) used\");\r\n    }\r\n    if (n > m) {\r\n        const temp = n;\r\n        n = m;\r\n        m = temp;\r\n        Logger.Warn(\"n > m therefore m and n swapped\");\r\n    }\r\n    const primTri: _PrimaryIsoTriangle = new _PrimaryIsoTriangle();\r\n    primTri.build(m, n);\r\n    const geodesicData = GeodesicData.BuildGeodesicData(primTri);\r\n    const goldbergData = geodesicData.toGoldbergData();\r\n\r\n    const goldberg = new GoldbergMesh(name);\r\n\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    goldberg._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n    const vertexData = CreateGoldbergVertexData(options, goldbergData);\r\n\r\n    vertexData.applyToMesh(goldberg, options.updatable);\r\n\r\n    goldberg.nbSharedFaces = geodesicData.sharedNodes;\r\n    goldberg.nbUnsharedFaces = geodesicData.poleNodes;\r\n    goldberg.adjacentFaces = geodesicData.adjacentFaces;\r\n    goldberg.nbFaces = goldberg.nbSharedFaces + goldberg.nbUnsharedFaces;\r\n    goldberg.nbFacesAtPole = (goldberg.nbUnsharedFaces - 12) / 12;\r\n    for (let f = 0; f < geodesicData.vertex.length; f++) {\r\n        goldberg.faceCenters.push(Vector3.FromArray(geodesicData.vertex[f]));\r\n        goldberg.faceColors.push(new Color4(1, 1, 1, 1));\r\n    }\r\n\r\n    for (let f = 0; f < goldbergData.face.length; f++) {\r\n        const verts = goldbergData.face[f];\r\n        const a = Vector3.FromArray(goldbergData.vertex[verts[0]]);\r\n        const b = Vector3.FromArray(goldbergData.vertex[verts[2]]);\r\n        const c = Vector3.FromArray(goldbergData.vertex[verts[1]]);\r\n        const ba = b.subtract(a);\r\n        const ca = c.subtract(a);\r\n        const norm = Vector3.Cross(ca, ba).normalize();\r\n        const z = Vector3.Cross(ca, norm).normalize();\r\n        goldberg.faceXaxis.push(ca.normalize());\r\n        goldberg.faceYaxis.push(norm);\r\n        goldberg.faceZaxis.push(z);\r\n    }\r\n    goldberg.setMetadata();\r\n\r\n    return goldberg;\r\n}\r\n\r\n/**\r\n * Standard Generic type to extend a class\r\n */\r\ntype MeshExtendToGoldberg<T = {}> = new (...args: any[]) => T;\r\n\r\n/**\r\n * Restrict the type to extending a Mesh\r\n */\r\ntype isMesh = MeshExtendToGoldberg<Mesh>;\r\n\r\n/**\r\n * Mixin to extend the Mesh class to a Goldberg class\r\n * When applied to extend a mesh tthe mesh must be an import of a previously exported Goldberg mesh\r\n */\r\nfunction GoldbergCreate<TBase extends isMesh>(Base: TBase) {\r\n    return class Goldberg extends Base {\r\n        public faceColors: Color4[] = [];\r\n        public faceCenters: Vector3[] = [];\r\n        public faceZaxis: Vector3[] = [];\r\n        public faceXaxis: Vector3[] = [];\r\n        public faceYaxis: Vector3[] = [];\r\n        public nbSharedFaces: number;\r\n        public nbUnsharedFaces: number;\r\n        public nbFaces: number;\r\n        public nbFacesAtPole: number;\r\n        public adjacentFaces: number[][];\r\n\r\n        public setMetadata() {\r\n            this.metadata = {\r\n                nbSharedFaces: this.nbSharedFaces,\r\n                nbUnsharedFaces: this.nbUnsharedFaces,\r\n                nbFacesAtPole: this.nbFacesAtPole,\r\n                nbFaces: this.nbFaces,\r\n                faceCenters: this.faceCenters,\r\n                faceXaxis: this.faceXaxis,\r\n                faceYaxis: this.faceYaxis,\r\n                faceZaxis: this.faceZaxis,\r\n                adjacentFaces: this.adjacentFaces\r\n            };\r\n        }\r\n\r\n        public relFace(poleOrShared: number, fromPole?: number): number {\r\n            if (fromPole === void 0) {\r\n                if (poleOrShared > this.nbUnsharedFaces - 1) {\r\n                    Logger.Warn(\"Maximum number of unshared faces used\");\r\n                    poleOrShared = this.nbUnsharedFaces - 1;\r\n                }\r\n                return this.nbUnsharedFaces + poleOrShared;\r\n            }\r\n            if (poleOrShared > 11) {\r\n                Logger.Warn(\"Last pole used\");\r\n                poleOrShared = 11;\r\n            }\r\n            if (fromPole > this.nbFacesAtPole - 1) {\r\n                Logger.Warn(\"Maximum number of faces at a pole used\");\r\n                fromPole = this.nbFacesAtPole - 1;\r\n            }\r\n            return 12 + poleOrShared * this.nbFacesAtPole + fromPole;\r\n        }\r\n\r\n        public refreshFaceData() {\r\n            this.nbSharedFaces = this.metadata.nbSharedFaces;\r\n            this.nbUnsharedFaces = this.metadata.nbUnsharedFaces;\r\n            this.nbFacesAtPole = this.metadata.nbFacesAtPole;\r\n            this.adjacentFaces = this.metadata.adjacentFaces;\r\n            this.nbFaces = this.metadata.nbFaces;\r\n            this.faceCenters = this.metadata.faceCenters,\r\n                this.faceXaxis = this.metadata.faceXaxis,\r\n                this.faceYaxis = this.metadata.faceYaxis,\r\n                this.faceZaxis = this.metadata.faceZaxis;\r\n        }\r\n\r\n        public changeFaceColors(colorRange: (number | Color4)[][]): number[] {\r\n            for (let i = 0; i < colorRange.length; i++) {\r\n                const min: number = <number>colorRange[i][0];\r\n                const max: number = <number>colorRange[i][1];\r\n                const col: Color4 = <Color4>colorRange[i][2];\r\n                for (let f = min; f < max + 1; f++) {\r\n                    this.faceColors[f] = col;\r\n                }\r\n            }\r\n            const newCols: number[] = [];\r\n            for (let f = 0; f < 12; f++) {\r\n                for (let i = 0; i < 5; i++) {\r\n                    newCols.push(this.faceColors[f].r, this.faceColors[f].g, this.faceColors[f].b, this.faceColors[f].a);\r\n                }\r\n            }\r\n            for (let f = 12; f < this.faceColors.length; f++) {\r\n                for (let i = 0; i < 6; i++) {\r\n                    newCols.push(this.faceColors[f].r, this.faceColors[f].g, this.faceColors[f].b, this.faceColors[f].a);\r\n                }\r\n            }\r\n            return newCols;\r\n        }\r\n\r\n        public setFaceColors(colorRange: (number | Color4)[][]) {\r\n            const newCols = this.changeFaceColors(colorRange);\r\n            this.setVerticesData(VertexBuffer.ColorKind, newCols);\r\n        }\r\n\r\n        public updateFaceColors(colorRange: (number | Color4)[][]) {\r\n            const newCols = this.changeFaceColors(colorRange);\r\n            this.updateVerticesData(VertexBuffer.ColorKind, newCols);\r\n        }\r\n\r\n        private changeFaceUVs(uvRange: (number | Vector2)[][]): FloatArray {\r\n            const uvs: FloatArray = this.getVerticesData(VertexBuffer.UVKind)!!;\r\n            for (let i = 0; i < uvRange.length; i++) {\r\n                const min: number = <number>uvRange[i][0];\r\n                const max: number = <number>uvRange[i][1];\r\n                const center: Vector2 = <Vector2>uvRange[i][2];\r\n                const radius: number = <number>uvRange[i][3];\r\n                const angle: number = <number>uvRange[i][4];\r\n                const points5: number[] = [];\r\n                const points6: number[] = [];\r\n                let u: number;\r\n                let v: number;\r\n                for (let p = 0; p < 5; p++) {\r\n                    u = center.x + radius * Math.cos(angle + p * Math.PI / 2.5);\r\n                    v = center.y + radius * Math.sin(angle + p * Math.PI / 2.5);\r\n                    if (u < 0) {\r\n                        u = 0;\r\n                    }\r\n                    if (u > 1) {\r\n                        u = 1;\r\n                    }\r\n                    points5.push(u, v);\r\n                }\r\n                for (let p = 0; p < 6; p++) {\r\n                    u = center.x + radius * Math.cos(angle + p * Math.PI / 3);\r\n                    v = center.y + radius * Math.sin(angle + p * Math.PI / 3);\r\n                    if (u < 0) {\r\n                        u = 0;\r\n                    }\r\n                    if (u > 1) {\r\n                        u = 1;\r\n                    }\r\n                    points6.push(u, v);\r\n                }\r\n                for (let f = min; f < Math.min(12, max + 1); f++) {\r\n                    for (let p = 0; p < 5; p++) {\r\n                        uvs[10 * f + 2 * p] = points5[2 * p];\r\n                        uvs[10 * f + 2 * p + 1] = points5[2 * p + 1];\r\n                    }\r\n                }\r\n                for (let f = Math.max(12, min); f < max + 1; f++) {\r\n                    for (let p = 0; p < 6; p++) {\r\n                        //120 + 12 * (f - 12) = 12 * f - 24\r\n                        uvs[12 * f - 24 + 2 * p] = points6[2 * p];\r\n                        uvs[12 * f - 23 + 2 * p] = points6[2 * p + 1];\r\n                    }\r\n                }\r\n            }\r\n            return uvs;\r\n        }\r\n\r\n        public setFaceUVs(uvRange: (number | Vector2)[][]) {\r\n            const newUVs: FloatArray = this.changeFaceUVs(uvRange);\r\n            this.setVerticesData(VertexBuffer.UVKind, newUVs);\r\n        }\r\n\r\n        public updateFaceUVs(uvRange: (number | Vector2)[][]) {\r\n            const newUVs = this.changeFaceUVs(uvRange);\r\n            this.updateVerticesData(VertexBuffer.UVKind, newUVs);\r\n        }\r\n\r\n        public placeOnFaceAt(mesh: Mesh, face: number, position: Vector3) {\r\n            const orientation = Vector3.RotationFromAxis(this.faceXaxis[face], this.faceYaxis[face], this.faceZaxis[face]);\r\n            mesh.rotation = orientation;\r\n            mesh.position = this.faceCenters[face].add(this.faceXaxis[face].scale(position.x)).add(this.faceYaxis[face].scale(position.y)).add(this.faceZaxis[face].scale(position.z));\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * Function to use when extending the mesh class to a Goldberg class\r\n */\r\nconst GoldbergMesh = GoldbergCreate(Mesh);\r\n/**\r\n * Function to use when extending the mesh class to a Goldberg class\r\n */\r\n\r\nexport const ExtendMeshToGoldberg = (mesh: Mesh): Mesh => {\r\n    const metadata = mesh.metadata;\r\n    metadata.faceCenters = metadata.faceCenters.map((el: Vector3) => new Vector3(el._x, el._y, el._z));\r\n    metadata.faceZaxis = metadata.faceZaxis.map((el: Vector3) => new Vector3(el._x, el._y, el._z));\r\n    metadata.faceXaxis = metadata.faceXaxis.map((el: Vector3) => new Vector3(el._x, el._y, el._z));\r\n    metadata.faceYaxis = metadata.faceYaxis.map((el: Vector3) => new Vector3(el._x, el._y, el._z));\r\n    const positions: Nullable<FloatArray> = mesh.getVerticesData(VertexBuffer.PositionKind);\r\n    const normals: Nullable<FloatArray> = mesh.getVerticesData(VertexBuffer.NormalKind);\r\n    const colors: Nullable<FloatArray> = mesh.getVerticesData(VertexBuffer.ColorKind);\r\n    const uvs: Nullable<FloatArray> = mesh.getVerticesData(VertexBuffer.UVKind);\r\n    const indices: Nullable<IndicesArray> = mesh.getIndices();\r\n\r\n    const vertexData = new VertexData();\r\n    vertexData.positions = positions;\r\n    vertexData.indices = indices;\r\n    vertexData.normals = normals;\r\n    vertexData.colors = colors;\r\n    vertexData.uvs = uvs;\r\n\r\n    let updatable = mesh.isVertexBufferUpdatable(VertexBuffer.PositionKind);\r\n    updatable = updatable && mesh.isVertexBufferUpdatable(VertexBuffer.NormalKind);\r\n    updatable = updatable && mesh.isVertexBufferUpdatable(VertexBuffer.ColorKind);\r\n    updatable = updatable && mesh.isVertexBufferUpdatable(VertexBuffer.UVKind);\r\n\r\n    const goldberg = new GoldbergMesh(mesh.name);\r\n    vertexData.applyToMesh(goldberg, updatable);\r\n    goldberg.metadata = metadata;\r\n    goldberg.refreshFaceData();\r\n    goldberg.material = mesh.material;\r\n    mesh.dispose();\r\n    return goldberg;\r\n};\r\n"]}