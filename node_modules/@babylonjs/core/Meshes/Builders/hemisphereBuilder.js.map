{"version":3,"file":"hemisphereBuilder.js","sourceRoot":"","sources":["../../../../sourceES6/core/Meshes/Builders/hemisphereBuilder.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAwB,MAAM,SAAS,CAAC;AAErD,OAAO,EAAE,YAAY,EAAE,MAAM,2BAA2B,CAAC;AACzD,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C;;;;;;GAMG;AACH,MAAM,UAAU,gBAAgB,CAAC,IAAY,EAAE,OAAgF,EAAE,KAAU;IAA5F,wBAAA,EAAA,YAAgF;IAC3H,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE;QACnB,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC;KACxB;IACD,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE;QACnB,OAAO,CAAC,QAAQ,GAAG,EAAE,CAAC;KACzB;IAED,IAAI,UAAU,GAAG,YAAY,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,QAAQ,EAAE,OAAO,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,QAAQ,EAAE,EAAE,KAAK,CAAC,CAAC;IACjH,IAAI,IAAI,GAAG,UAAU,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,OAAO,CAAC,QAAQ,GAAG,CAAC,EAAE,YAAY,EAAE,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;IAClI,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;IAC/B,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC;IAEzB,IAAI,MAAM,GAAS,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,EAAE,UAAU,CAAC,EAAE,IAAI,CAAC,CAAC;IAC9D,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;IAEnB,OAAO,MAAM,CAAC;AAClB,CAAC;AACD;;;GAGG;AACH,MAAM,CAAC,IAAM,iBAAiB,GAAG;IAC7B,gBAAgB,kBAAA;CACnB,CAAC;AAEF;;GAEG;AACH,IAAI,CAAC,gBAAgB,GAAG,UAAC,IAAY,EAAE,QAAgB,EAAE,QAAgB,EAAE,KAAa;IACpF,IAAI,OAAO,GAAG;QACV,QAAQ,EAAE,QAAQ;QAClB,QAAQ,EAAE,QAAQ;KACrB,CAAC;IAEF,OAAO,gBAAgB,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;AAClD,CAAC,CAAC","sourcesContent":["import { Mesh, _CreationDataStorage } from \"../mesh\";\r\nimport { Scene } from \"../../scene\";\r\nimport { CreateSphere } from '../Builders/sphereBuilder';\r\nimport { CreateDisc } from \"./discBuilder\";\r\n\r\n/**\r\n * Creates a hemisphere mesh\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param scene defines the hosting scene\r\n * @returns the hemisphere mesh\r\n */\r\nexport function CreateHemisphere(name: string, options: { segments?: number, diameter?: number, sideOrientation?: number } = {}, scene: any): Mesh {\r\n    if (!options.diameter) {\r\n        options.diameter = 1;\r\n    }\r\n    if (!options.segments) {\r\n        options.segments = 16;\r\n    }\r\n\r\n    var halfSphere = CreateSphere(\"\", { slice: 0.5, diameter: options.diameter, segments: options.segments }, scene);\r\n    var disc = CreateDisc(\"\", { radius: options.diameter / 2, tessellation: (options.segments * 3) + (4 - options.segments) }, scene);\r\n    disc.rotation.x = -Math.PI / 2;\r\n    disc.parent = halfSphere;\r\n\r\n    var merged = <Mesh>Mesh.MergeMeshes([disc, halfSphere], true);\r\n    merged.name = name;\r\n\r\n    return merged;\r\n}\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use the function directly from the module\r\n */\r\nexport const HemisphereBuilder = {\r\n    CreateHemisphere\r\n};\r\n\r\n/**\r\n * Creates a hemispheric light\r\n */\r\nMesh.CreateHemisphere = (name: string, segments: number, diameter: number, scene?: Scene): Mesh => {\r\n    var options = {\r\n        segments: segments,\r\n        diameter: diameter\r\n    };\r\n\r\n    return CreateHemisphere(name, options, scene);\r\n};"]}