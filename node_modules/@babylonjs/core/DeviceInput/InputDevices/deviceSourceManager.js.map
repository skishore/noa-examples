{"version":3,"file":"deviceSourceManager.js","sourceRoot":"","sources":["../../../../sourceES6/core/DeviceInput/InputDevices/deviceSourceManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { DeviceInputSystem } from '../deviceInputSystem';\r\nimport { Engine } from '../../Engines/engine';\r\nimport { IDisposable } from '../../scene';\r\nimport { DeviceType } from './deviceEnums';\r\nimport { Nullable } from '../../types';\r\nimport { Observable } from '../../Misc/observable';\r\nimport { DeviceInput } from './deviceTypes';\r\nimport { IDeviceEvent, IDeviceInputSystem } from '../Interfaces/inputInterfaces';\r\n\r\n/**\r\n * Class that handles all input for a specific device\r\n */\r\nexport class DeviceSource<T extends DeviceType> {\r\n    // Public Members\r\n    /**\r\n     * Observable to handle device input changes per device\r\n     */\r\n    public readonly onInputChangedObservable = new Observable<IDeviceEvent>();\r\n\r\n    // Private Members\r\n    private readonly _deviceInputSystem: IDeviceInputSystem;\r\n\r\n    /**\r\n     * Default Constructor\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param deviceType Type of device\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     */\r\n    constructor(deviceInputSystem: IDeviceInputSystem,\r\n        /** Type of device */\r\n        public readonly deviceType: DeviceType,\r\n        /** \"Slot\" or index that device is referenced in */\r\n        public readonly deviceSlot: number = 0) {\r\n        this._deviceInputSystem = deviceInputSystem;\r\n    }\r\n\r\n    /**\r\n     * Get input for specific input\r\n     * @param inputIndex index of specific input on device\r\n     * @returns Input value from DeviceInputSystem\r\n     */\r\n    public getInput(inputIndex: DeviceInput<T>): number {\r\n        return this._deviceInputSystem.pollInput(this.deviceType, this.deviceSlot, inputIndex);\r\n    }\r\n}\r\n\r\n/**\r\n * Class to keep track of devices\r\n */\r\nexport class DeviceSourceManager implements IDisposable {\r\n    // Public Members\r\n    /**\r\n     * Observable to be triggered when after a device is connected, any new observers added will be triggered against already connected devices\r\n     */\r\n    public readonly onDeviceConnectedObservable = new Observable<DeviceSource<DeviceType>>((observer) => {\r\n        this.getDevices().forEach((device) => {\r\n            if (device) {\r\n                this.onDeviceConnectedObservable.notifyObserver(observer, device);\r\n            }\r\n        });\r\n    });\r\n\r\n    /**\r\n     * Observable to be triggered when after a device is disconnected\r\n     */\r\n    public readonly onDeviceDisconnectedObservable = new Observable<DeviceSource<DeviceType>>();\r\n\r\n    // Private Members\r\n    private readonly _devices: Array<Array<DeviceSource<DeviceType>>>;\r\n    private readonly _firstDevice: Array<number>;\r\n    private readonly _deviceInputSystem: IDeviceInputSystem;\r\n\r\n    /**\r\n     * Default Constructor\r\n     * @param engine engine to pull input element from\r\n     */\r\n    constructor(engine: Engine) {\r\n        const numberOfDeviceTypes = Object.keys(DeviceType).length / 2;\r\n        this._devices = new Array<Array<DeviceSource<DeviceType>>>(numberOfDeviceTypes);\r\n        this._firstDevice = new Array<number>(numberOfDeviceTypes);\r\n        this._deviceInputSystem = DeviceInputSystem.Create(engine);\r\n\r\n        this._deviceInputSystem.onDeviceConnectedObservable.add((eventData) => {\r\n            this._addDevice(eventData.deviceType, eventData.deviceSlot);\r\n            this.onDeviceConnectedObservable.notifyObservers(this.getDeviceSource(eventData.deviceType, eventData.deviceSlot)!);\r\n        });\r\n\r\n        this._deviceInputSystem.onDeviceDisconnectedObservable.add((eventData) => {\r\n            const device = this.getDeviceSource(eventData.deviceType, eventData.deviceSlot)!; // Grab local reference to use before removing from devices\r\n            this._removeDevice(eventData.deviceType, eventData.deviceSlot);\r\n            this.onDeviceDisconnectedObservable.notifyObservers(device);\r\n        });\r\n\r\n        this._deviceInputSystem.onInputChangedObservable.add((eventData) => {\r\n            this.getDeviceSource(eventData.deviceType, eventData.deviceSlot)?.onInputChangedObservable.notifyObservers(eventData);\r\n        });\r\n    }\r\n\r\n    // Public Functions\r\n    /**\r\n     * Gets a DeviceSource, given a type and slot\r\n     * @param deviceType Enum specifying device type\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @returns DeviceSource object\r\n     */\r\n    public getDeviceSource<T extends DeviceType>(deviceType: T, deviceSlot?: number): Nullable<DeviceSource<T>> {\r\n        if (deviceSlot === undefined) {\r\n            if (this._firstDevice[deviceType] === undefined) {\r\n                return null;\r\n            }\r\n\r\n            deviceSlot = this._firstDevice[deviceType];\r\n        }\r\n\r\n        if (!this._devices[deviceType] || this._devices[deviceType][deviceSlot] === undefined) {\r\n            return null;\r\n        }\r\n\r\n        return this._devices[deviceType][deviceSlot];\r\n    }\r\n\r\n    /**\r\n     * Gets an array of DeviceSource objects for a given device type\r\n     * @param deviceType Enum specifying device type\r\n     * @returns Array of DeviceSource objects\r\n     */\r\n    public getDeviceSources<T extends DeviceType>(deviceType: T): ReadonlyArray<DeviceSource<T>> {\r\n        return this._devices[deviceType].filter((source) => { return !!source; });\r\n    }\r\n\r\n    /**\r\n     * Returns a read-only list of all available devices\r\n     * @returns Read-only array with active devices\r\n     */\r\n    public getDevices(): ReadonlyArray<DeviceSource<DeviceType>> {\r\n        const deviceArray = new Array<DeviceSource<DeviceType>>();\r\n        this._devices.forEach((deviceSet) => {\r\n            deviceArray.push.apply(deviceArray, deviceSet);\r\n        });\r\n\r\n        return deviceArray;\r\n    }\r\n\r\n    /**\r\n     * Dispose of DeviceInputSystem and other parts\r\n     */\r\n    public dispose() {\r\n        this.onDeviceConnectedObservable.clear();\r\n        this.onDeviceDisconnectedObservable.clear();\r\n        this._deviceInputSystem.dispose();\r\n    }\r\n\r\n    // Private Functions\r\n    /**\r\n     * Function to add device name to device list\r\n     * @param deviceType Enum specifying device type\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     */\r\n    private _addDevice(deviceType: DeviceType, deviceSlot: number) {\r\n        if (!this._devices[deviceType]) {\r\n            this._devices[deviceType] = new Array<DeviceSource<DeviceType>>();\r\n        }\r\n\r\n        if (!this._devices[deviceType][deviceSlot]) {\r\n            this._devices[deviceType][deviceSlot] = new DeviceSource(this._deviceInputSystem, deviceType, deviceSlot);\r\n            this._updateFirstDevices(deviceType);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function to remove device name to device list\r\n     * @param deviceType Enum specifying device type\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     */\r\n    private _removeDevice(deviceType: DeviceType, deviceSlot: number) {\r\n        if (this._devices[deviceType]?.[deviceSlot]) {\r\n            delete this._devices[deviceType][deviceSlot];\r\n        }\r\n        // Even if we don't delete a device, we should still check for the first device as things may have gotten out of sync.\r\n        this._updateFirstDevices(deviceType);\r\n    }\r\n\r\n    /**\r\n     * Updates array storing first connected device of each type\r\n     * @param type Type of Device\r\n     */\r\n    private _updateFirstDevices(type: DeviceType) {\r\n        switch (type) {\r\n            case DeviceType.Keyboard:\r\n            case DeviceType.Mouse:\r\n                this._firstDevice[type] = 0;\r\n                break;\r\n            case DeviceType.Touch:\r\n            case DeviceType.DualShock:\r\n            case DeviceType.Xbox:\r\n            case DeviceType.Switch:\r\n            case DeviceType.Generic:\r\n                delete this._firstDevice[type];\r\n                const devices = this._devices[type];\r\n                if (devices) {\r\n                    for (let i = 0; i < devices.length; i++) {\r\n                        if (devices[i]) {\r\n                            this._firstDevice[type] = i;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    }\r\n}\r\n"]}