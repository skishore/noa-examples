{"version":3,"file":"inputInterfaces.js","sourceRoot":"","sources":["../../../../sourceES6/core/DeviceInput/Interfaces/inputInterfaces.ts"],"names":[],"mappings":"","sourcesContent":["import { IEvent } from \"../../Events/deviceInputEvents\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport { IDisposable } from \"../../scene\";\r\nimport { Nullable } from \"../../types\";\r\nimport { DeviceType } from \"../InputDevices/deviceEnums\";\r\n\r\n/**\r\n * Interface for Observables in DeviceInputSystem\r\n */\r\nexport interface IDeviceEvent extends IEvent {\r\n    /**\r\n     * Device type\r\n     */\r\n    deviceType: DeviceType;\r\n    /**\r\n     * Device slot\r\n     */\r\n    deviceSlot: number;\r\n    /**\r\n     * Input array index\r\n     */\r\n    inputIndex: number;\r\n    /**\r\n     * Previous state of given input\r\n     */\r\n    previousState: Nullable<number>;\r\n    /**\r\n     * Current state of given input\r\n     */\r\n    currentState: Nullable<number>;\r\n}\r\n\r\n/**\r\n * Interface for NativeInput object\r\n */\r\nexport interface INativeInput extends IDisposable {\r\n    /**\r\n     * Callback for when a device is connected\r\n     */\r\n    onDeviceConnected: (deviceType: DeviceType, deviceSlot: number) => void;\r\n\r\n    /**\r\n     * Callback for when a device is disconnected\r\n     */\r\n    onDeviceDisconnected: (deviceType: DeviceType, deviceSlot: number) => void;\r\n\r\n    /**\r\n     * Callback for when input is changed on a device\r\n     */\r\n    onInputChanged: (deviceType: DeviceType, deviceSlot: number, inputIndex: number, previousState: Nullable<number>, currentState: Nullable<number>, eventData?: any) => void;\r\n\r\n    /**\r\n     * Checks for current device input value, given an id and input index.\r\n     * @param deviceType Type of device\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @returns Current value of input\r\n     */\r\n    pollInput(deviceType: DeviceType, deviceSlot: number, inputIndex: number): number;\r\n\r\n    /**\r\n     * Check for a specific device in the DeviceInputSystem\r\n     * @param deviceType Type of device to check for\r\n     * @returns bool with status of device's existence\r\n     */\r\n    isDeviceAvailable(deviceType: DeviceType): boolean;\r\n}\r\n\r\n/**\r\n * Interface for DeviceInputSystem implementations (JS and Native)\r\n */\r\nexport interface IDeviceInputSystem extends IDisposable {\r\n    // Observables\r\n    /**\r\n     * Observable for devices being connected\r\n     */\r\n    readonly onDeviceConnectedObservable: Observable<{ deviceType: DeviceType, deviceSlot: number }>;\r\n    /**\r\n     * Observable for devices being disconnected\r\n     */\r\n    readonly onDeviceDisconnectedObservable: Observable<{ deviceType: DeviceType, deviceSlot: number }>;\r\n    /**\r\n     * Observable for changes to device input\r\n     */\r\n    readonly onInputChangedObservable: Observable<IDeviceEvent>;\r\n\r\n    /**\r\n     * Configures events to work with an engine's active element\r\n     */\r\n    configureEvents(): void;\r\n\r\n    // Functions\r\n    /**\r\n     * Checks for current device input value, given an id and input index. Throws exception if requested device not initialized.\r\n     * @param deviceType Enum specifiying device type\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @returns Current value of input\r\n     */\r\n    pollInput(deviceType: DeviceType, deviceSlot: number, inputIndex: number): number;\r\n\r\n    /**\r\n     * Check for a specific device in the DeviceInputSystem\r\n     * @param deviceType Type of device to check for\r\n     * @returns bool with status of device's existence\r\n     */\r\n    isDeviceAvailable(deviceType: DeviceType): boolean;\r\n}"]}