import { Observable } from "../../Misc/observable";
import { DeviceType } from "../InputDevices/deviceEnums";
import { IDeviceEvent, IDeviceInputSystem, INativeInput } from "../Interfaces/inputInterfaces";
/** @hidden */
export declare class NativeDeviceInputWrapper implements IDeviceInputSystem {
    /**
     * Observable for devices being connected
     */
    readonly onDeviceConnectedObservable: Observable<{
        deviceType: DeviceType;
        deviceSlot: number;
    }>;
    /**
     * Observable for devices being disconnected
     */
    readonly onDeviceDisconnectedObservable: Observable<{
        deviceType: DeviceType;
        deviceSlot: number;
    }>;
    /**
     * Observable for changes to device input
     */
    readonly onInputChangedObservable: Observable<IDeviceEvent>;
    private _nativeInput;
    constructor(nativeInput?: INativeInput);
    /**
     * Configures events to work with an engine's active element
     */
    configureEvents(): void;
    /**
     * Checks for current device input value, given an id and input index. Throws exception if requested device not initialized.
     * @param deviceType Enum specifiying device type
     * @param deviceSlot "Slot" or index that device is referenced in
     * @param inputIndex Id of input to be checked
     * @returns Current value of input
     */
    pollInput(deviceType: DeviceType, deviceSlot: number, inputIndex: number): number;
    /**
     * Check for a specific device in the DeviceInputSystem
     * @param deviceType Type of device to check for
     * @returns bool with status of device's existence
     */
    isDeviceAvailable(deviceType: DeviceType): boolean;
    /**
     * Dispose of all the observables
     */
    dispose(): void;
    /**
     * For versions of BabylonNative that don't have the NativeInput plugin initialized, create a dummy version
     * @returns Object with dummy functions
     */
    private _createDummyNativeInput;
}
