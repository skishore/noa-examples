{"version":3,"file":"nativeDeviceInputWrapper.js","sourceRoot":"","sources":["../../../../sourceES6/core/DeviceInput/Implementations/nativeDeviceInputWrapper.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from \"../../Misc/observable\";\r\nimport { Nullable } from \"../../types\";\r\nimport { DeviceEventFactory } from \"../Helpers/eventFactory\";\r\nimport { DeviceType } from \"../InputDevices/deviceEnums\";\r\nimport { IDeviceEvent, IDeviceInputSystem, INativeInput } from \"../Interfaces/inputInterfaces\";\r\n\r\n/** @hidden */\r\nexport class NativeDeviceInputWrapper implements IDeviceInputSystem {\r\n    /**\r\n     * Observable for devices being connected\r\n     */\r\n    public readonly onDeviceConnectedObservable: Observable<{ deviceType: DeviceType; deviceSlot: number; }>;\r\n    /**\r\n     * Observable for devices being disconnected\r\n     */\r\n    public readonly onDeviceDisconnectedObservable: Observable<{ deviceType: DeviceType; deviceSlot: number; }>;\r\n    /**\r\n     * Observable for changes to device input\r\n     */\r\n    public readonly onInputChangedObservable: Observable<IDeviceEvent>;\r\n\r\n    private _nativeInput: INativeInput;\r\n\r\n    public constructor(nativeInput?: INativeInput) {\r\n        this._nativeInput = nativeInput || this._createDummyNativeInput();\r\n        this.onDeviceConnectedObservable = new Observable<{ deviceType: DeviceType; deviceSlot: number; }>();\r\n        this.onDeviceDisconnectedObservable = new Observable<{ deviceType: DeviceType; deviceSlot: number; }>();\r\n        this.onInputChangedObservable = new Observable<IDeviceEvent>();\r\n\r\n        this._nativeInput.onDeviceConnected = (deviceType, deviceSlot) => {\r\n            this.onDeviceConnectedObservable.notifyObservers({ deviceType, deviceSlot });\r\n        };\r\n\r\n        this._nativeInput.onDeviceDisconnected = (deviceType, deviceSlot) => {\r\n            this.onDeviceDisconnectedObservable.notifyObservers({ deviceType, deviceSlot });\r\n        };\r\n\r\n        this._nativeInput.onInputChanged = (deviceType, deviceSlot, inputIndex, previousState, currentState, eventData) => {\r\n            const evt = DeviceEventFactory.CreateDeviceEvent(deviceType, deviceSlot, inputIndex, currentState, this);\r\n\r\n            let deviceEvent = evt as IDeviceEvent;\r\n            deviceEvent.deviceType = deviceType;\r\n            deviceEvent.deviceSlot = deviceSlot;\r\n            deviceEvent.inputIndex = inputIndex;\r\n            deviceEvent.previousState = previousState;\r\n            deviceEvent.currentState = currentState;\r\n\r\n            this.onInputChangedObservable.notifyObservers(deviceEvent);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Configures events to work with an engine's active element\r\n     */\r\n    public configureEvents(): void {\r\n        // Do nothing\r\n    }\r\n\r\n    // Public functions\r\n    /**\r\n     * Checks for current device input value, given an id and input index. Throws exception if requested device not initialized.\r\n     * @param deviceType Enum specifiying device type\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @returns Current value of input\r\n     */\r\n    public pollInput(deviceType: DeviceType, deviceSlot: number, inputIndex: number): number {\r\n        return this._nativeInput.pollInput(deviceType, deviceSlot, inputIndex);\r\n    }\r\n\r\n    /**\r\n     * Check for a specific device in the DeviceInputSystem\r\n     * @param deviceType Type of device to check for\r\n     * @returns bool with status of device's existence\r\n     */\r\n    public isDeviceAvailable(deviceType: DeviceType) {\r\n        //TODO: FIx native side first\r\n        return (deviceType === DeviceType.Mouse || deviceType === DeviceType.Touch);\r\n    }\r\n\r\n    /**\r\n     * Dispose of all the observables\r\n     */\r\n    public dispose(): void {\r\n        this.onDeviceConnectedObservable.clear();\r\n        this.onDeviceDisconnectedObservable.clear();\r\n        this.onInputChangedObservable.clear();\r\n    }\r\n\r\n    /**\r\n     * For versions of BabylonNative that don't have the NativeInput plugin initialized, create a dummy version\r\n     * @returns Object with dummy functions\r\n     */\r\n    private _createDummyNativeInput() {\r\n        let nativeInput = {\r\n            onDeviceConnected: (deviceType: DeviceType, deviceSlot: number) => { },\r\n            onDeviceDisconnected: (deviceType: DeviceType, deviceSlot: number) => { },\r\n            onInputChanged: (deviceType: DeviceType, deviceSlot: number, inputIndex: number, previousState: Nullable<number>, currentState: Nullable<number>, eventData?: any) => { },\r\n            pollInput: () => { return 0; },\r\n            isDeviceAvailable: () => { return false; },\r\n            dispose: () => { },\r\n        };\r\n\r\n        return nativeInput;\r\n    }\r\n}"]}