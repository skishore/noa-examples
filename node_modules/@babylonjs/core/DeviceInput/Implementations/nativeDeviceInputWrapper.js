import { Observable } from "../../Misc/observable.js";
import { DeviceEventFactory } from "../Helpers/eventFactory.js";
import { DeviceType } from "../InputDevices/deviceEnums.js";
/** @hidden */
var NativeDeviceInputWrapper = /** @class */ (function () {
    function NativeDeviceInputWrapper(nativeInput) {
        var _this = this;
        this._nativeInput = nativeInput || this._createDummyNativeInput();
        this.onDeviceConnectedObservable = new Observable();
        this.onDeviceDisconnectedObservable = new Observable();
        this.onInputChangedObservable = new Observable();
        this._nativeInput.onDeviceConnected = function (deviceType, deviceSlot) {
            _this.onDeviceConnectedObservable.notifyObservers({ deviceType: deviceType, deviceSlot: deviceSlot });
        };
        this._nativeInput.onDeviceDisconnected = function (deviceType, deviceSlot) {
            _this.onDeviceDisconnectedObservable.notifyObservers({ deviceType: deviceType, deviceSlot: deviceSlot });
        };
        this._nativeInput.onInputChanged = function (deviceType, deviceSlot, inputIndex, previousState, currentState, eventData) {
            var evt = DeviceEventFactory.CreateDeviceEvent(deviceType, deviceSlot, inputIndex, currentState, _this);
            var deviceEvent = evt;
            deviceEvent.deviceType = deviceType;
            deviceEvent.deviceSlot = deviceSlot;
            deviceEvent.inputIndex = inputIndex;
            deviceEvent.previousState = previousState;
            deviceEvent.currentState = currentState;
            _this.onInputChangedObservable.notifyObservers(deviceEvent);
        };
    }
    /**
     * Configures events to work with an engine's active element
     */
    NativeDeviceInputWrapper.prototype.configureEvents = function () {
        // Do nothing
    };
    // Public functions
    /**
     * Checks for current device input value, given an id and input index. Throws exception if requested device not initialized.
     * @param deviceType Enum specifiying device type
     * @param deviceSlot "Slot" or index that device is referenced in
     * @param inputIndex Id of input to be checked
     * @returns Current value of input
     */
    NativeDeviceInputWrapper.prototype.pollInput = function (deviceType, deviceSlot, inputIndex) {
        return this._nativeInput.pollInput(deviceType, deviceSlot, inputIndex);
    };
    /**
     * Check for a specific device in the DeviceInputSystem
     * @param deviceType Type of device to check for
     * @returns bool with status of device's existence
     */
    NativeDeviceInputWrapper.prototype.isDeviceAvailable = function (deviceType) {
        //TODO: FIx native side first
        return (deviceType === DeviceType.Mouse || deviceType === DeviceType.Touch);
    };
    /**
     * Dispose of all the observables
     */
    NativeDeviceInputWrapper.prototype.dispose = function () {
        this.onDeviceConnectedObservable.clear();
        this.onDeviceDisconnectedObservable.clear();
        this.onInputChangedObservable.clear();
    };
    /**
     * For versions of BabylonNative that don't have the NativeInput plugin initialized, create a dummy version
     * @returns Object with dummy functions
     */
    NativeDeviceInputWrapper.prototype._createDummyNativeInput = function () {
        var nativeInput = {
            onDeviceConnected: function (deviceType, deviceSlot) { },
            onDeviceDisconnected: function (deviceType, deviceSlot) { },
            onInputChanged: function (deviceType, deviceSlot, inputIndex, previousState, currentState, eventData) { },
            pollInput: function () { return 0; },
            isDeviceAvailable: function () { return false; },
            dispose: function () { },
        };
        return nativeInput;
    };
    return NativeDeviceInputWrapper;
}());
export { NativeDeviceInputWrapper };
//# sourceMappingURL=nativeDeviceInputWrapper.js.map