import { Observable } from "./observable.js";
import { runCoroutineAsync, inlineScheduler } from "./coroutine.js";
function createObservableScheduler(observable) {
    var coroutines = new Array();
    var onSuccesses = new Array();
    var onErrors = new Array();
    var observer = observable.add(function () {
        var count = coroutines.length;
        for (var i = 0; i < count; i++) {
            inlineScheduler(coroutines.pop(), onSuccesses.pop(), onErrors.pop());
        }
    });
    var scheduler = function (coroutine, onSuccess, onError) {
        coroutines.push(coroutine);
        onSuccesses.push(onSuccess);
        onErrors.push(onError);
    };
    scheduler.dispose = function () {
        observable.remove(observer);
    };
    return scheduler;
}
Observable.prototype.runCoroutineAsync = function (coroutine) {
    if (!this.coroutineScheduler) {
        this.coroutineScheduler = createObservableScheduler(this);
    }
    if (!this.coroutineAbortController) {
        this.coroutineAbortController = new AbortController();
    }
    return runCoroutineAsync(coroutine, this.coroutineScheduler, this.coroutineAbortController.signal);
};
Observable.prototype.cancelAllCoroutines = function () {
    var _a;
    (_a = this.coroutineAbortController) === null || _a === void 0 ? void 0 : _a.abort();
    this.coroutineAbortController = undefined;
};
//# sourceMappingURL=observableCoroutine.js.map