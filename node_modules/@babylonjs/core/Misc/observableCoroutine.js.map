{"version":3,"file":"observableCoroutine.js","sourceRoot":"","sources":["../../../sourceES6/core/Misc/observableCoroutine.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAC1C,OAAO,EAAqD,iBAAiB,EAAE,eAAe,EAAE,MAAM,aAAa,CAAC;AAEpH,SAAS,yBAAyB,CAAI,UAA2B;IAC7D,IAAM,UAAU,GAAG,IAAI,KAAK,EAAqB,CAAC;IAClD,IAAM,WAAW,GAAG,IAAI,KAAK,EAA0C,CAAC;IACxE,IAAM,QAAQ,GAAG,IAAI,KAAK,EAA4B,CAAC;IAEvD,IAAM,QAAQ,GAAG,UAAU,CAAC,GAAG,CAAC;QAC5B,IAAM,KAAK,GAAG,UAAU,CAAC,MAAM,CAAC;QAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;YAC5B,eAAe,CAAC,UAAU,CAAC,GAAG,EAAG,EAAE,WAAW,CAAC,GAAG,EAAG,EAAE,QAAQ,CAAC,GAAG,EAAG,CAAC,CAAC;SAC3E;IACL,CAAC,CAAC,CAAC;IAEH,IAAM,SAAS,GAAG,UAAC,SAA4B,EAAE,SAAiD,EAAE,OAAiC;QACjI,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC3B,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC5B,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC3B,CAAC,CAAC;IAEF,SAAS,CAAC,OAAO,GAAG;QAChB,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAChC,CAAC,CAAC;IAEF,OAAO,SAAS,CAAC;AACrB,CAAC;AA4BD,UAAU,CAAC,SAAS,CAAC,iBAAiB,GAAG,UAAS,SAA+B;IAC7E,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;QAC1B,IAAI,CAAC,kBAAkB,GAAG,yBAAyB,CAAC,IAAI,CAAC,CAAC;KAC7D;IAED,IAAI,CAAC,IAAI,CAAC,wBAAwB,EAAE;QAChC,IAAI,CAAC,wBAAwB,GAAG,IAAI,eAAe,EAAE,CAAC;KACzD;IAED,OAAO,iBAAiB,CAAC,SAAS,EAAE,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,CAAC;AACvG,CAAC,CAAC;AAEF,UAAU,CAAC,SAAS,CAAC,mBAAmB,GAAG;;IACvC,MAAA,IAAI,CAAC,wBAAwB,0CAAE,KAAK,EAAE,CAAC;IACvC,IAAI,CAAC,wBAAwB,GAAG,SAAS,CAAC;AAC9C,CAAC,CAAC","sourcesContent":["import { Observable } from \"./observable\";\r\nimport { AsyncCoroutine, CoroutineStep, CoroutineScheduler, runCoroutineAsync, inlineScheduler } from \"./coroutine\";\r\n\r\nfunction createObservableScheduler<T>(observable: Observable<any>) {\r\n    const coroutines = new Array<AsyncCoroutine<T>>();\r\n    const onSuccesses = new Array<(stepResult: CoroutineStep<T>) => void>();\r\n    const onErrors = new Array<(stepError: any) => void>();\r\n\r\n    const observer = observable.add(() => {\r\n        const count = coroutines.length;\r\n        for (let i = 0; i < count; i++) {\r\n            inlineScheduler(coroutines.pop()!, onSuccesses.pop()!, onErrors.pop()!);\r\n        }\r\n    });\r\n\r\n    const scheduler = (coroutine: AsyncCoroutine<T>, onSuccess: (stepResult: CoroutineStep<T>) => void, onError: (stepError: any) => void) => {\r\n        coroutines.push(coroutine);\r\n        onSuccesses.push(onSuccess);\r\n        onErrors.push(onError);\r\n    };\r\n\r\n    scheduler.dispose = () => {\r\n        observable.remove(observer);\r\n    };\r\n\r\n    return scheduler;\r\n}\r\n\r\ndeclare module \"./observable\" {\r\n    export interface Observable<T> {\r\n        /**\r\n         * Internal observable based coroutine scheduler instance.\r\n         */\r\n        coroutineScheduler: CoroutineScheduler<void> | undefined;\r\n\r\n        /**\r\n         * Internal AbortController for in flight coroutines.\r\n         */\r\n        coroutineAbortController: AbortController | undefined;\r\n\r\n        /**\r\n         * Runs a coroutine asynchronously on this observable\r\n         * @param coroutine the iterator resulting from having started the coroutine\r\n         * @returns a promise which will be resolved when the coroutine finishes or rejected if the coroutine is cancelled\r\n         */\r\n        runCoroutineAsync(coroutine: AsyncCoroutine<void>): Promise<void>;\r\n\r\n        /**\r\n         * Cancels all coroutines currently running on this observable\r\n         */\r\n        cancelAllCoroutines(): void;\r\n    }\r\n}\r\n\r\nObservable.prototype.runCoroutineAsync = function(coroutine: AsyncCoroutine<void>) {\r\n    if (!this.coroutineScheduler) {\r\n        this.coroutineScheduler = createObservableScheduler(this);\r\n    }\r\n\r\n    if (!this.coroutineAbortController) {\r\n        this.coroutineAbortController = new AbortController();\r\n    }\r\n\r\n    return runCoroutineAsync(coroutine, this.coroutineScheduler, this.coroutineAbortController.signal);\r\n};\r\n\r\nObservable.prototype.cancelAllCoroutines = function() {\r\n    this.coroutineAbortController?.abort();\r\n    this.coroutineAbortController = undefined;\r\n};\r\n"]}