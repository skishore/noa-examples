{"version":3,"file":"copyTools.js","sourceRoot":"","sources":["../../../sourceES6/core/Misc/copyTools.ts"],"names":[],"mappings":"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","sourcesContent":["import { ISize } from \"../Maths/math.size\";\nimport { Nullable } from \"../types\";\n\ndeclare type BaseTexture = import(\"../Materials/Textures/baseTexture\").BaseTexture;\n\n/**\n * Transform some pixel data to a base64 string\n * @param pixels defines the pixel data to transform to base64\n * @param size defines the width and height of the (texture) data\n * @param invertY true if the data must be inverted for the Y coordinate during the conversion\n * @returns The base64 encoded string or null\n */\nexport function GenerateBase64StringFromPixelData(pixels: ArrayBufferView, size: ISize, invertY = false): Nullable<string> {\n    var width = size.width;\n    var height = size.height;\n\n    if (pixels instanceof Float32Array) {\n        var len = pixels.byteLength / pixels.BYTES_PER_ELEMENT;\n        var npixels = new Uint8Array(len);\n\n        while (--len >= 0) {\n            var val = pixels[len];\n            if (val < 0) {\n                val = 0;\n            } else if (val > 1) {\n                val = 1;\n            }\n            npixels[len] = val * 255;\n        }\n\n        pixels = npixels;\n    }\n\n    var canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n\n    var ctx = canvas.getContext('2d');\n    if (!ctx) {\n        return null;\n    }\n\n    var imageData = ctx.createImageData(width, height);\n    var castData = <any>imageData.data;\n    castData.set(pixels);\n    ctx.putImageData(imageData, 0, 0);\n\n    if (invertY) {\n        var canvas2 = document.createElement('canvas');\n        canvas2.width = width;\n        canvas2.height = height;\n\n        var ctx2 = canvas2.getContext('2d');\n        if (!ctx2) {\n            return null;\n        }\n\n        ctx2.translate(0, height);\n        ctx2.scale(1, -1);\n        ctx2.drawImage(canvas, 0, 0);\n\n        return canvas2.toDataURL('image/png');\n    }\n\n    return canvas.toDataURL('image/png');\n}\n\n/**\n * Reads the pixels stored in the webgl texture and returns them as a base64 string\n * @param texture defines the texture to read pixels from\n * @param faceIndex defines the face of the texture to read (in case of cube texture)\n * @param level defines the LOD level of the texture to read (in case of Mip Maps)\n * @returns The base64 encoded string or null\n */\nexport function GenerateBase64StringFromTexture(texture: BaseTexture, faceIndex = 0, level = 0): Nullable<string> {\n    var internalTexture = texture.getInternalTexture();\n    if (!internalTexture) {\n        return null;\n    }\n\n    var pixels = texture._readPixelsSync(faceIndex, level);\n    if (!pixels) {\n        return null;\n    }\n\n    return GenerateBase64StringFromPixelData(pixels, texture.getSize(), internalTexture.invertY);\n}\n\n/**\n * Reads the pixels stored in the webgl texture and returns them as a base64 string\n * @param texture defines the texture to read pixels from\n * @param faceIndex defines the face of the texture to read (in case of cube texture)\n * @param level defines the LOD level of the texture to read (in case of Mip Maps)\n * @returns The base64 encoded string or null wrapped in a promise\n */\nexport async function GenerateBase64StringFromTextureAsync(texture: BaseTexture, faceIndex = 0, level = 0): Promise<Nullable<string>> {\n    var internalTexture = texture.getInternalTexture();\n    if (!internalTexture) {\n        return null;\n    }\n\n    var pixels = await texture.readPixels(faceIndex, level);\n    if (!pixels) {\n        return null;\n    }\n\n    return GenerateBase64StringFromPixelData(pixels, texture.getSize(), internalTexture.invertY);\n}\n\n/**\n * Class used to host copy specific utilities\n * (Back-compat)\n */\nexport const CopyTools = {\n    /**\n     * Transform some pixel data to a base64 string\n     * @param pixels defines the pixel data to transform to base64\n     * @param size defines the width and height of the (texture) data\n     * @param invertY true if the data must be inverted for the Y coordinate during the conversion\n     * @returns The base64 encoded string or null\n     */\n    GenerateBase64StringFromPixelData,\n\n    /**\n     * Reads the pixels stored in the webgl texture and returns them as a base64 string\n     * @param texture defines the texture to read pixels from\n     * @param faceIndex defines the face of the texture to read (in case of cube texture)\n     * @param level defines the LOD level of the texture to read (in case of Mip Maps)\n     * @returns The base64 encoded string or null\n     */\n    GenerateBase64StringFromTexture,\n\n    /**\n     * Reads the pixels stored in the webgl texture and returns them as a base64 string\n     * @param texture defines the texture to read pixels from\n     * @param faceIndex defines the face of the texture to read (in case of cube texture)\n     * @param level defines the LOD level of the texture to read (in case of Mip Maps)\n     * @returns The base64 encoded string or null wrapped in a promise\n     */\n    GenerateBase64StringFromTextureAsync\n};\n"]}