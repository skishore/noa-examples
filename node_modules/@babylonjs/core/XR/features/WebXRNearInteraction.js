import { __extends } from "tslib";
import { WebXRFeaturesManager, WebXRFeatureName } from "../webXRFeaturesManager.js";
import { CreateSphere } from "../../Meshes/Builders/sphereBuilder.js";
import { Vector3, Quaternion, TmpVectors } from "../../Maths/math.vector.js";
import { Ray } from "../../Culling/ray.js";
import { PickingInfo } from "../../Collisions/pickingInfo.js";
import { WebXRAbstractFeature } from "./WebXRAbstractFeature.js";
import { UtilityLayerRenderer } from "../../Rendering/utilityLayerRenderer.js";
import { BoundingSphere } from "../../Culling/boundingSphere.js";
import { StandardMaterial } from "../../Materials/standardMaterial.js";
import { Color3 } from "../../Maths/math.color.js";
// side effects
import "../../Meshes/subMesh.project.js";
/**
 * A module that will enable near interaction near interaction for hands and motion controllers of XR Input Sources
 */
var WebXRNearInteraction = /** @class */ (function (_super) {
    __extends(WebXRNearInteraction, _super);
    /**
     * constructs a new background remover module
     * @param _xrSessionManager the session manager for this module
     * @param _options read-only options to be used in this module
     */
    function WebXRNearInteraction(_xrSessionManager, _options) {
        var _this = _super.call(this, _xrSessionManager) || this;
        _this._options = _options;
        _this._attachController = function (xrController) {
            if (_this._controllers[xrController.uniqueId]) {
                // already attached
                return;
            }
            // get two new meshes
            var pickIndexMeshTip = _this._generateNewHandTipMesh();
            var selectionMesh = _this._generateVisualCue();
            _this._controllers[xrController.uniqueId] = {
                xrController: xrController,
                meshUnderPointer: null,
                nearInteractionMesh: null,
                pick: null,
                pickIndexMeshTip: pickIndexMeshTip,
                grabRay: new Ray(new Vector3(), new Vector3()),
                hoverInteraction: false,
                nearInteraction: false,
                grabInteraction: false,
                id: WebXRNearInteraction._idCounter++,
                pickedPointVisualCue: selectionMesh,
            };
            if (_this._attachedController) {
                if (!_this._options.enableNearInteractionOnAllControllers &&
                    _this._options.preferredHandedness &&
                    xrController.inputSource.handedness === _this._options.preferredHandedness) {
                    _this._attachedController = xrController.uniqueId;
                }
            }
            else {
                if (!_this._options.enableNearInteractionOnAllControllers) {
                    _this._attachedController = xrController.uniqueId;
                }
            }
            switch (xrController.inputSource.targetRayMode) {
                case "tracked-pointer":
                    return _this._attachNearInteractionMode(xrController);
                case "gaze":
                    return null;
                case "screen":
                    return null;
            }
        };
        _this._controllers = {};
        _this._farInteractionFeature = null;
        /**
         * default color of the selection ring
         */
        _this.selectionMeshDefaultColor = new Color3(0.8, 0.8, 0.8);
        /**
         * This color will be applied to the selection ring when selection is triggered
         */
        _this.selectionMeshPickedColor = new Color3(0.3, 0.3, 1.0);
        _this._hoverRadius = 0.1;
        _this._pickRadius = 0.02;
        _this._nearGrabLengthScale = 5;
        _this._indexTipQuaternion = new Quaternion();
        _this._indexTipOrientationVector = Vector3.Zero();
        _this._scene = _this._xrSessionManager.scene;
        if (_this._options.farInteractionFeature) {
            _this._farInteractionFeature = _this._options.farInteractionFeature;
        }
        return _this;
    }
    /**
     * Attach this feature
     * Will usually be called by the features manager
     *
     * @returns true if successful.
     */
    WebXRNearInteraction.prototype.attach = function () {
        var _this = this;
        if (!_super.prototype.attach.call(this)) {
            return false;
        }
        this._options.xrInput.controllers.forEach(this._attachController);
        this._addNewAttachObserver(this._options.xrInput.onControllerAddedObservable, this._attachController);
        this._addNewAttachObserver(this._options.xrInput.onControllerRemovedObservable, function (controller) {
            // REMOVE the controller
            _this._detachController(controller.uniqueId);
        });
        this._scene.constantlyUpdateMeshUnderPointer = true;
        return true;
    };
    /**
     * Detach this feature.
     * Will usually be called by the features manager
     *
     * @returns true if successful.
     */
    WebXRNearInteraction.prototype.detach = function () {
        var _this = this;
        if (!_super.prototype.detach.call(this)) {
            return false;
        }
        Object.keys(this._controllers).forEach(function (controllerId) {
            _this._detachController(controllerId);
        });
        return true;
    };
    /**
     * Will get the mesh under a specific pointer.
     * `scene.meshUnderPointer` will only return one mesh - either left or right.
     * @param controllerId the controllerId to check
     * @returns The mesh under pointer or null if no mesh is under the pointer
     */
    WebXRNearInteraction.prototype.getMeshUnderPointer = function (controllerId) {
        if (this._controllers[controllerId]) {
            return this._controllers[controllerId].meshUnderPointer;
        }
        else {
            return null;
        }
    };
    /**
     * Get the xr controller that correlates to the pointer id in the pointer event
     *
     * @param id the pointer id to search for
     * @returns the controller that correlates to this id or null if not found
     */
    WebXRNearInteraction.prototype.getXRControllerByPointerId = function (id) {
        var keys = Object.keys(this._controllers);
        for (var i = 0; i < keys.length; ++i) {
            if (this._controllers[keys[i]].id === id) {
                return this._controllers[keys[i]].xrController || null;
            }
        }
        return null;
    };
    /**
     * This function sets webXRControllerPointerSelection feature that will be disabled when
     * the hover range is reached for a mesh and will be reattached when not in hover range.
     * This is used to remove the selection rays when moving.
     * @param farInteractionFeature the feature to disable when finger is in hover range for a mesh
     */
    WebXRNearInteraction.prototype.setFarInteractionFeature = function (farInteractionFeature) {
        this._farInteractionFeature = farInteractionFeature;
    };
    /**
     * Filter used for near interaction pick and hover
     */
    WebXRNearInteraction.prototype._nearPickPredicate = function (mesh) {
        return mesh.isEnabled() && mesh.isVisible && mesh.isPickable && mesh.isNearPickable;
    };
    /**
     * Filter used for near interaction grab
     */
    WebXRNearInteraction.prototype._nearGrabPredicate = function (mesh) {
        return mesh.isEnabled() && mesh.isVisible && mesh.isPickable && mesh.isNearGrabbable;
    };
    /**
     * Filter used for any near interaction
     */
    WebXRNearInteraction.prototype._nearInteractionPredicate = function (mesh) {
        return mesh.isEnabled() && mesh.isVisible && mesh.isPickable && (mesh.isNearPickable || mesh.isNearGrabbable);
    };
    WebXRNearInteraction.prototype._controllerAvailablePredicate = function (mesh, controllerId) {
        var parent = mesh;
        while (parent) {
            if (parent.reservedDataStore && parent.reservedDataStore.nearInteraction && parent.reservedDataStore.nearInteraction.excludedControllerId === controllerId) {
                return false;
            }
            parent = parent.parent;
        }
        return true;
    };
    WebXRNearInteraction.prototype._onXRFrame = function (_xrFrame) {
        var _this = this;
        Object.keys(this._controllers).forEach(function (id) {
            // only do this for the selected pointer
            var controllerData = _this._controllers[id];
            // If near interaction is not enabled/available for this controller, return early
            if ((!_this._options.enableNearInteractionOnAllControllers && id !== _this._attachedController) ||
                !controllerData.xrController ||
                !controllerData.xrController.inputSource.hand) {
                controllerData.pick = null;
                return;
            }
            controllerData.hoverInteraction = false;
            controllerData.nearInteraction = false;
            // Every frame check collisions/input
            if (controllerData.xrController) {
                var hand = controllerData.xrController.inputSource.hand;
                if (hand) {
                    var xrIndexTip = hand.get("index-finger-tip");
                    if (xrIndexTip) {
                        var indexTipPose = _xrFrame.getJointPose(xrIndexTip, _this._xrSessionManager.referenceSpace);
                        if (indexTipPose && indexTipPose.transform) {
                            var axisRHSMultiplier = _this._scene.useRightHandedSystem ? 1 : -1;
                            var indexTipPos = indexTipPose.transform.position;
                            var indexTipOrientation = indexTipPose.transform.orientation;
                            _this._indexTipQuaternion.set(indexTipOrientation.x, indexTipOrientation.y, indexTipOrientation.z * axisRHSMultiplier, indexTipOrientation.w * axisRHSMultiplier);
                            // set positions for near pick and hover
                            if (controllerData.pickIndexMeshTip) {
                                controllerData.pickIndexMeshTip.position.set(indexTipPos.x, indexTipPos.y, indexTipPos.z * axisRHSMultiplier);
                            }
                            // set near interaction grab ray parameters
                            var nearGrabRayLength = _this._nearGrabLengthScale * _this._hoverRadius;
                            controllerData.grabRay.origin.set(indexTipPos.x, indexTipPos.y, indexTipPos.z * axisRHSMultiplier);
                            _this._indexTipQuaternion.toEulerAnglesToRef(_this._indexTipOrientationVector);
                            controllerData.grabRay.direction.set(_this._indexTipOrientationVector.x, _this._indexTipOrientationVector.y, _this._indexTipOrientationVector.z);
                            controllerData.grabRay.length = nearGrabRayLength;
                        }
                    }
                }
            }
            else {
                return;
            }
            var accuratePickInfo = function (originalScenePick, utilityScenePick) {
                var pick = null;
                if (!utilityScenePick || !utilityScenePick.hit) {
                    // No hit in utility scene
                    pick = originalScenePick;
                }
                else if (!originalScenePick || !originalScenePick.hit) {
                    // No hit in original scene
                    pick = utilityScenePick;
                }
                else if (utilityScenePick.distance < originalScenePick.distance) {
                    // Hit is closer in utility scene
                    pick = utilityScenePick;
                }
                else {
                    // Hit is closer in original scene
                    pick = originalScenePick;
                }
                return pick;
            };
            var populateNearInteractionInfo = function (nearInteractionInfo) {
                var result = new PickingInfo();
                var nearInteractionAtOrigin = false;
                var nearInteraction = nearInteractionInfo && nearInteractionInfo.pickedPoint && nearInteractionInfo.hit;
                if (nearInteractionInfo === null || nearInteractionInfo === void 0 ? void 0 : nearInteractionInfo.pickedPoint) {
                    nearInteractionAtOrigin = nearInteractionInfo.pickedPoint.x === 0 && nearInteractionInfo.pickedPoint.y === 0 && nearInteractionInfo.pickedPoint.z === 0;
                }
                if (nearInteraction && !nearInteractionAtOrigin) {
                    result = nearInteractionInfo;
                }
                return result;
            };
            // Don't perform touch logic while grabbing, to prevent triggering touch interactions while in the middle of a grab interaction
            // Dont update cursor logic either - the cursor should already be visible for the grab to be in range,
            // and in order to maintain its position on the target mesh it is parented for the duration of the grab.
            if (!controllerData.grabInteraction) {
                var pick = null;
                // near interaction hover
                var utilitySceneHoverPick = null;
                if (_this._options.useUtilityLayer && _this._utilityLayerScene) {
                    utilitySceneHoverPick = _this._pickWithSphere(controllerData, _this._hoverRadius, _this._utilityLayerScene, function (mesh) {
                        return _this._nearInteractionPredicate(mesh);
                    });
                }
                var originalSceneHoverPick = _this._pickWithSphere(controllerData, _this._hoverRadius, _this._scene, function (mesh) { return _this._nearInteractionPredicate(mesh); });
                var hoverPickInfo = accuratePickInfo(originalSceneHoverPick, utilitySceneHoverPick);
                if (hoverPickInfo && hoverPickInfo.hit) {
                    pick = populateNearInteractionInfo(hoverPickInfo);
                    if (pick.hit) {
                        controllerData.hoverInteraction = true;
                    }
                }
                // near interaction pick
                if (controllerData.pickIndexMeshTip && controllerData.hoverInteraction) {
                    var utilitySceneNearPick = null;
                    if (_this._options.useUtilityLayer && _this._utilityLayerScene) {
                        utilitySceneNearPick = _this._pickWithSphere(controllerData, _this._pickRadius, _this._utilityLayerScene, function (mesh) { return _this._nearPickPredicate(mesh); });
                    }
                    var originalSceneNearPick = _this._pickWithSphere(controllerData, _this._pickRadius, _this._scene, function (mesh) { return _this._nearPickPredicate(mesh); });
                    var pickInfo = accuratePickInfo(originalSceneNearPick, utilitySceneNearPick);
                    var nearPick = populateNearInteractionInfo(pickInfo);
                    if (nearPick.hit) {
                        // Near pick takes precedence over hover interaction
                        pick = nearPick;
                        controllerData.nearInteraction = true;
                    }
                }
                controllerData.pick = pick;
                // Update mesh under pointer
                if (controllerData.pick && controllerData.pick.pickedPoint && controllerData.pick.hit) {
                    controllerData.meshUnderPointer = controllerData.pick.pickedMesh;
                    controllerData.pickedPointVisualCue.position.copyFrom(controllerData.pick.pickedPoint);
                    controllerData.pickedPointVisualCue.isVisible = true;
                    if (_this._farInteractionFeature && _this._farInteractionFeature.attached) {
                        _this._farInteractionFeature._setPointerSelectionDisabledByPointerId(controllerData.id, true);
                    }
                }
                else {
                    controllerData.meshUnderPointer = null;
                    controllerData.pickedPointVisualCue.isVisible = false;
                    if (_this._farInteractionFeature && _this._farInteractionFeature.attached) {
                        _this._farInteractionFeature._setPointerSelectionDisabledByPointerId(controllerData.id, false);
                    }
                }
            }
        });
    };
    Object.defineProperty(WebXRNearInteraction.prototype, "_utilityLayerScene", {
        get: function () {
            return this._options.customUtilityLayerScene || UtilityLayerRenderer.DefaultUtilityLayer.utilityLayerScene;
        },
        enumerable: false,
        configurable: true
    });
    WebXRNearInteraction.prototype._generateVisualCue = function () {
        var sceneToRenderTo = this._options.useUtilityLayer ? this._options.customUtilityLayerScene || UtilityLayerRenderer.DefaultUtilityLayer.utilityLayerScene : this._scene;
        var selectionMesh = CreateSphere("nearInteraction", {
            diameter: 0.0035 * 3,
        }, sceneToRenderTo);
        selectionMesh.bakeCurrentTransformIntoVertices();
        selectionMesh.isPickable = false;
        selectionMesh.isVisible = false;
        selectionMesh.rotationQuaternion = Quaternion.Identity();
        var targetMat = new StandardMaterial("targetMat", sceneToRenderTo);
        targetMat.specularColor = Color3.Black();
        targetMat.emissiveColor = this.selectionMeshDefaultColor;
        targetMat.backFaceCulling = false;
        selectionMesh.material = targetMat;
        return selectionMesh;
    };
    WebXRNearInteraction.prototype._isControllerReadyForNearInteraction = function (id) {
        if (this._farInteractionFeature) {
            return this._farInteractionFeature._getPointerSelectionDisabledByPointerId(id);
        }
        return true;
    };
    WebXRNearInteraction.prototype._attachNearInteractionMode = function (xrController) {
        var _this = this;
        var controllerData = this._controllers[xrController.uniqueId];
        var pointerEventInit = {
            pointerId: controllerData.id,
            pointerType: "xr",
        };
        controllerData.onFrameObserver = this._xrSessionManager.onXRFrameObservable.add(function () {
            if ((!_this._options.enableNearInteractionOnAllControllers && xrController.uniqueId !== _this._attachedController) ||
                !controllerData.xrController ||
                !controllerData.xrController.inputSource.hand) {
                return;
            }
            if (controllerData.pick) {
                controllerData.pick.ray = controllerData.grabRay;
            }
            if (controllerData.pick && _this._isControllerReadyForNearInteraction(controllerData.id)) {
                _this._scene.simulatePointerMove(controllerData.pick, pointerEventInit);
            }
            // Near pick pointer event
            if (controllerData.nearInteraction && controllerData.pick && controllerData.pick.hit) {
                if (!controllerData.nearInteractionMesh) {
                    _this._scene.simulatePointerDown(controllerData.pick, pointerEventInit);
                    controllerData.nearInteractionMesh = controllerData.meshUnderPointer;
                }
            }
            else if (controllerData.nearInteractionMesh && controllerData.pick) {
                _this._scene.simulatePointerUp(controllerData.pick, pointerEventInit);
                controllerData.nearInteractionMesh = null;
            }
        });
        var grabCheck = function (pressed) {
            if (_this._options.enableNearInteractionOnAllControllers || (xrController.uniqueId === _this._attachedController && _this._isControllerReadyForNearInteraction(controllerData.id))) {
                if (controllerData.pick) {
                    controllerData.pick.ray = controllerData.grabRay;
                }
                if (pressed && controllerData.pick && controllerData.meshUnderPointer && _this._nearGrabPredicate(controllerData.meshUnderPointer)) {
                    controllerData.grabInteraction = true;
                    controllerData.pickedPointVisualCue.isVisible = false;
                    _this._scene.simulatePointerDown(controllerData.pick, pointerEventInit);
                }
                else if (!pressed && controllerData.pick && controllerData.grabInteraction) {
                    _this._scene.simulatePointerUp(controllerData.pick, pointerEventInit);
                    controllerData.grabInteraction = false;
                    controllerData.pickedPointVisualCue.isVisible = true;
                }
            }
            else {
                if (pressed && !_this._options.enableNearInteractionOnAllControllers && !_this._options.disableSwitchOnClick) {
                    _this._attachedController = xrController.uniqueId;
                }
            }
        };
        if (xrController.inputSource.gamepad) {
            var init = function (motionController) {
                controllerData.squeezeComponent = motionController.getComponent("grasp");
                if (controllerData.squeezeComponent) {
                    controllerData.onSqueezeButtonChangedObserver = controllerData.squeezeComponent.onButtonStateChangedObservable.add(function (component) {
                        if (component.changes.pressed) {
                            var pressed = component.changes.pressed.current;
                            grabCheck(pressed);
                        }
                    });
                }
                else {
                    controllerData.selectionComponent = motionController.getMainComponent();
                    controllerData.onButtonChangedObserver = controllerData.selectionComponent.onButtonStateChangedObservable.add(function (component) {
                        if (component.changes.pressed) {
                            var pressed = component.changes.pressed.current;
                            grabCheck(pressed);
                        }
                    });
                }
            };
            if (xrController.motionController) {
                init(xrController.motionController);
            }
            else {
                xrController.onMotionControllerInitObservable.add(init);
            }
        }
        else {
            // use the select and squeeze events
            var selectStartListener = function (event) {
                if (controllerData.xrController &&
                    event.inputSource === controllerData.xrController.inputSource &&
                    controllerData.pick &&
                    _this._isControllerReadyForNearInteraction(controllerData.id) &&
                    controllerData.meshUnderPointer &&
                    _this._nearGrabPredicate(controllerData.meshUnderPointer)) {
                    controllerData.grabInteraction = true;
                    controllerData.pickedPointVisualCue.isVisible = false;
                    _this._scene.simulatePointerDown(controllerData.pick, pointerEventInit);
                }
            };
            var selectEndListener = function (event) {
                if (controllerData.xrController && event.inputSource === controllerData.xrController.inputSource && controllerData.pick && _this._isControllerReadyForNearInteraction(controllerData.id)) {
                    _this._scene.simulatePointerUp(controllerData.pick, pointerEventInit);
                    controllerData.grabInteraction = false;
                    controllerData.pickedPointVisualCue.isVisible = true;
                }
            };
            controllerData.eventListeners = {
                selectend: selectEndListener,
                selectstart: selectStartListener,
            };
            this._xrSessionManager.session.addEventListener("selectstart", selectStartListener);
            this._xrSessionManager.session.addEventListener("selectend", selectEndListener);
        }
    };
    WebXRNearInteraction.prototype._detachController = function (xrControllerUniqueId) {
        var _this = this;
        var _a;
        var controllerData = this._controllers[xrControllerUniqueId];
        if (!controllerData) {
            return;
        }
        if (controllerData.squeezeComponent) {
            if (controllerData.onSqueezeButtonChangedObserver) {
                controllerData.squeezeComponent.onButtonStateChangedObservable.remove(controllerData.onSqueezeButtonChangedObserver);
            }
        }
        if (controllerData.selectionComponent) {
            if (controllerData.onButtonChangedObserver) {
                controllerData.selectionComponent.onButtonStateChangedObservable.remove(controllerData.onButtonChangedObserver);
            }
        }
        if (controllerData.onFrameObserver) {
            this._xrSessionManager.onXRFrameObservable.remove(controllerData.onFrameObserver);
        }
        if (controllerData.eventListeners) {
            Object.keys(controllerData.eventListeners).forEach(function (eventName) {
                var func = controllerData.eventListeners && controllerData.eventListeners[eventName];
                if (func) {
                    _this._xrSessionManager.session.removeEventListener(eventName, func);
                }
            });
        }
        (_a = controllerData.pickIndexMeshTip) === null || _a === void 0 ? void 0 : _a.dispose();
        controllerData.pickedPointVisualCue.dispose();
        // Fire a pointerup
        var pointerEventInit = {
            pointerId: controllerData.id,
            pointerType: "xr",
        };
        this._scene.simulatePointerUp(new PickingInfo(), pointerEventInit);
        // remove from the map
        delete this._controllers[xrControllerUniqueId];
        if (this._attachedController === xrControllerUniqueId) {
            // check for other controllers
            var keys = Object.keys(this._controllers);
            if (keys.length) {
                this._attachedController = keys[0];
            }
            else {
                this._attachedController = "";
            }
        }
    };
    WebXRNearInteraction.prototype._generateNewHandTipMesh = function () {
        // populate information for near hover, pick and pinch
        var meshCreationScene = this._options.useUtilityLayer ? this._options.customUtilityLayerScene || UtilityLayerRenderer.DefaultUtilityLayer.utilityLayerScene : this._scene;
        var pickIndexMeshTip = null;
        var createSphereMesh = function (name, scale, sceneToUse) {
            var resultMesh = null;
            resultMesh = CreateSphere(name, { diameter: 1 }, sceneToUse);
            resultMesh.scaling.set(scale, scale, scale);
            resultMesh.isVisible = false;
            return resultMesh;
        };
        pickIndexMeshTip = createSphereMesh("IndexPickSphere", this._pickRadius, meshCreationScene);
        return pickIndexMeshTip;
    };
    WebXRNearInteraction.prototype._pickWithSphere = function (controllerData, radius, sceneToUse, predicate) {
        var pickingInfo = new PickingInfo();
        pickingInfo.distance = +Infinity;
        if (controllerData.pickIndexMeshTip && controllerData.xrController) {
            var position = controllerData.pickIndexMeshTip.position;
            var sphere = BoundingSphere.CreateFromCenterAndRadius(position, radius);
            for (var meshIndex = 0; meshIndex < sceneToUse.meshes.length; meshIndex++) {
                var mesh = sceneToUse.meshes[meshIndex];
                if (!predicate(mesh) || !this._controllerAvailablePredicate(mesh, controllerData.xrController.uniqueId)) {
                    continue;
                }
                var result = WebXRNearInteraction.PickMeshWithSphere(mesh, sphere);
                if (result && result.hit && result.distance < pickingInfo.distance) {
                    pickingInfo.hit = result.hit;
                    pickingInfo.pickedMesh = mesh;
                    pickingInfo.pickedPoint = result.pickedPoint;
                    pickingInfo.aimTransform = controllerData.xrController.pointer;
                    pickingInfo.gripTransform = controllerData.xrController.grip || null;
                    pickingInfo.originMesh = controllerData.pickIndexMeshTip;
                    pickingInfo.distance = result.distance;
                }
            }
        }
        return pickingInfo;
    };
    /**
     * Picks a mesh with a sphere
     * @param mesh the mesh to pick
     * @param sphere picking sphere in world coordinates
     * @param skipBoundingInfo a boolean indicating if we should skip the bounding info check
     * @returns the picking info
     */
    WebXRNearInteraction.PickMeshWithSphere = function (mesh, sphere, skipBoundingInfo) {
        if (skipBoundingInfo === void 0) { skipBoundingInfo = false; }
        var subMeshes = mesh.subMeshes;
        var pi = new PickingInfo();
        var boundingInfo = mesh.getBoundingInfo();
        if (!mesh._generatePointsArray()) {
            return pi;
        }
        if (!mesh.subMeshes || !boundingInfo) {
            return pi;
        }
        if (!skipBoundingInfo && !BoundingSphere.Intersects(boundingInfo.boundingSphere, sphere)) {
            return pi;
        }
        var result = TmpVectors.Vector3[0];
        var tmpVec = TmpVectors.Vector3[1];
        var distance = +Infinity;
        var tmp, tmpDistanceSphereToCenter, tmpDistanceSurfaceToCenter;
        var center = TmpVectors.Vector3[2];
        var worldToMesh = TmpVectors.Matrix[0];
        worldToMesh.copyFrom(mesh.getWorldMatrix());
        worldToMesh.invert();
        Vector3.TransformCoordinatesToRef(sphere.center, worldToMesh, center);
        for (var index = 0; index < subMeshes.length; index++) {
            var subMesh = subMeshes[index];
            subMesh.projectToRef(center, mesh._positions, mesh.getIndices(), tmpVec);
            Vector3.TransformCoordinatesToRef(tmpVec, mesh.getWorldMatrix(), tmpVec);
            tmp = Vector3.Distance(tmpVec, sphere.center);
            // Check for finger inside of mesh
            tmpDistanceSurfaceToCenter = Vector3.Distance(tmpVec, mesh.getAbsolutePosition());
            tmpDistanceSphereToCenter = Vector3.Distance(sphere.center, mesh.getAbsolutePosition());
            if (tmpDistanceSphereToCenter !== -1 && tmpDistanceSurfaceToCenter !== -1 && tmpDistanceSurfaceToCenter > tmpDistanceSphereToCenter) {
                tmp = 0;
                tmpVec.copyFrom(sphere.center);
            }
            if (tmp !== -1 && tmp < distance) {
                distance = tmp;
                result.copyFrom(tmpVec);
            }
        }
        if (distance < sphere.radius) {
            pi.hit = true;
            pi.distance = distance;
            pi.pickedMesh = mesh;
            pi.pickedPoint = result.clone();
        }
        return pi;
    };
    WebXRNearInteraction._idCounter = 200;
    /**
     * The module's name
     */
    WebXRNearInteraction.Name = WebXRFeatureName.NEAR_INTERACTION;
    /**
     * The (Babylon) version of this module.
     * This is an integer representing the implementation version.
     * This number does not correspond to the WebXR specs version
     */
    WebXRNearInteraction.Version = 1;
    return WebXRNearInteraction;
}(WebXRAbstractFeature));
export { WebXRNearInteraction };
//Register the plugin
WebXRFeaturesManager.AddWebXRFeature(WebXRNearInteraction.Name, function (xrSessionManager, options) {
    return function () { return new WebXRNearInteraction(xrSessionManager, options); };
}, WebXRNearInteraction.Version, true);
//# sourceMappingURL=WebXRNearInteraction.js.map