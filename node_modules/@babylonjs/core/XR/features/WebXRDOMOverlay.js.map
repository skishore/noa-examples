{"version":3,"file":"WebXRDOMOverlay.js","sourceRoot":"","sources":["../../../../sourceES6/core/XR/features/WebXRDOMOverlay.ts"],"names":[],"mappings":"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","sourcesContent":["import { Tools } from \"../../Misc/tools\";\nimport { Nullable } from \"../../types\";\nimport { WebXRFeatureName, WebXRFeaturesManager } from \"../webXRFeaturesManager\";\nimport { WebXRSessionManager } from \"../webXRSessionManager\";\nimport { WebXRAbstractFeature } from \"./WebXRAbstractFeature\";\n\n/**\n * Options for DOM Overlay feature\n */\nexport interface IWebXRDomOverlayOptions {\n    /**\n     * DOM Element or document query selector string for overlay.\n     *\n     * NOTE: UA may make this element background transparent in XR.\n     */\n    element: Element | string;\n    /**\n     * Supress XR Select events on container element (DOM blocks interaction to scene).\n     */\n    supressXRSelectEvents?: boolean;\n}\n\n/**\n * Type of DOM overlay provided by UA.\n */\ntype WebXRDomOverlayType =\n    /**\n     * Covers the entire physical screen for a screen-based device, for example handheld AR\n     */\n    'screen' |\n    /**\n     * Appears as a floating rectangle in space\n     */\n    'floating' |\n    /**\n     * Follows the userâ€™s head movement consistently, appearing similar to a HUD\n     */\n    'head-locked';\n\n/**\n * DOM Overlay Feature\n *\n * @since 5.0.0\n */\nexport class WebXRDomOverlay extends WebXRAbstractFeature {\n\n    /**\n     * Type of overlay - non-null when available\n     */\n    private _domOverlayType: Nullable<WebXRDomOverlayType> = null;\n\n    /**\n     * Event Listener to supress \"beforexrselect\" events.\n     */\n    private _beforeXRSelectListener: Nullable<EventListenerOrEventListenerObject> = null;\n\n    /**\n     * Element used for overlay\n     */\n    private _element: Nullable<Element> = null;\n\n    /**\n     * The module's name\n     */\n    public static readonly Name = WebXRFeatureName.DOM_OVERLAY;\n    /**\n     * The (Babylon) version of this module.\n     * This is an integer representing the implementation version.\n     * This number does not correspond to the WebXR specs version\n     */\n    public static readonly Version = 1;\n\n    /**\n    * Creates a new instance of the dom-overlay feature\n    * @param _xrSessionManager an instance of WebXRSessionManager\n    * @param options options to use when constructing this feature\n    */\n    constructor(\n        _xrSessionManager: WebXRSessionManager,\n        /**\n         * options to use when constructing this feature\n         */\n        public readonly options: IWebXRDomOverlayOptions\n    ) {\n        super(_xrSessionManager);\n        this.xrNativeFeatureName = \"dom-overlay\";\n\n        // https://immersive-web.github.io/dom-overlays/\n        Tools.Warn(\"dom-overlay is an experimental and unstable feature.\");\n    }\n\n    /**\n     * attach this feature\n     * Will usually be called by the features manager\n     *\n     * @returns true if successful.\n     */\n    public attach(): boolean {\n        if (!super.attach()) {\n            return false;\n        }\n\n        // Feature not available\n        if (!this._xrSessionManager.session.domOverlayState || this._xrSessionManager.session.domOverlayState.type === null) {\n            return false;\n        }\n\n        this._domOverlayType = this._xrSessionManager.session.domOverlayState.type;\n\n        if (this._element !== null && this.options.supressXRSelectEvents === true) {\n            this._beforeXRSelectListener = (ev) => {\n                ev.preventDefault();\n            };\n            this._element.addEventListener('beforexrselect', this._beforeXRSelectListener);\n        }\n\n        return true;\n    }\n\n    /**\n     * The type of DOM overlay (null when not supported).  Provided by UA and remains unchanged for duration of session.\n     */\n    public get domOverlayType(): Nullable<WebXRDomOverlayType> {\n        return this._domOverlayType;\n    }\n\n    /**\n     * Dispose this feature and all of the resources attached\n     */\n    public dispose(): void {\n        super.dispose();\n        if (this._element !== null && this._beforeXRSelectListener) {\n            this._element.removeEventListener('beforexrselect', this._beforeXRSelectListener);\n        }\n    }\n\n    protected _onXRFrame(_xrFrame: XRFrame): void { /* empty */ }\n\n    /**\n     * Extends the session init object if needed\n     * @returns augmentation object for the xr session init object.\n     */\n    public async getXRSessionInitExtension(): Promise<Partial<XRSessionInit>> {\n        if (this.options.element === undefined) {\n            Tools.Warn('\"element\" option must be provided to attach xr-dom-overlay feature.');\n            return {};\n        } else if (typeof this.options.element === 'string') {\n            const selectedElement = document.querySelector(this.options.element);\n            if (selectedElement === null) {\n                Tools.Warn(`element not found '${this.options.element}' (not requesting xr-dom-overlay)`);\n                return {};\n            }\n            this._element = selectedElement;\n        } else {\n            this._element = this.options.element;\n        }\n\n        return {\n            domOverlay: {\n                root: this._element\n            }\n        };\n    }\n}\n\n//register the plugin\nWebXRFeaturesManager.AddWebXRFeature(\n    WebXRDomOverlay.Name,\n    (xrSessionManager, options) => {\n        return () => new WebXRDomOverlay(xrSessionManager, options);\n    },\n    WebXRDomOverlay.Version,\n    false\n);"]}