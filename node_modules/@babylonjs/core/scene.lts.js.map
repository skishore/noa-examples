{"version":3,"file":"scene.lts.js","sourceRoot":"","sources":["../../sourceES6/core/scene.lts.ts"],"names":[],"mappings":"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","sourcesContent":["\r\nimport { Camera } from \"./Cameras/camera\";\r\nimport { Nullable } from \"./types\";\r\nimport { Material } from \"./Materials/material\";\r\nimport { BaseTexture } from \"./Materials/Textures/baseTexture\";\r\nimport { Bone } from \"./Bones/bone\";\r\nimport { Light } from \"./Lights/light\";\r\nimport { AbstractMesh } from \"./Meshes/abstractMesh\";\r\nimport { TransformNode } from \"./Meshes/transformNode\";\r\nimport { Node } from \"./node\";\r\nimport { Skeleton } from \"./Bones/skeleton\";\r\nimport { IParticleSystem } from \"./Particles/IParticleSystem\";\r\nimport { Geometry } from \"./Meshes/geometry\";\r\n\r\n/**\r\n * @hidden\r\n */\r\ndeclare type TypeofScene = typeof import('./scene').Scene;\r\n\r\ndeclare module './scene' {\r\n    interface Scene {\r\n        /**\r\n         * sets the active camera of the scene using its Id\r\n         * @param id defines the camera's Id\r\n         * @return the new active camera or null if none found.\r\n         * @deprecated Please use setActiveCameraById instead\r\n         */\r\n        setActiveCameraByID(id: string): Nullable<Camera>;\r\n        /**\r\n         * get a material using its id\r\n         * @param id defines the material's Id\r\n         * @return the material or null if none found.\r\n         * @deprecated Please use getMaterialById instead\r\n         */\r\n        getMaterialByID(id: string): Nullable<Material>;\r\n        /**\r\n         * Gets a the last added material using a given id\r\n         * @param id defines the material's Id\r\n         * @return the last material with the given id or null if none found.\r\n         * @deprecated Please use getLastMaterialById instead\r\n         */\r\n        getLastMaterialByID(id: string): Nullable<Material>;\r\n\r\n        /**\r\n         * Get a texture using its unique id\r\n         * @param uniqueId defines the texture's unique id\r\n         * @return the texture or null if none found.\r\n         * @deprecated Please use getTextureByUniqueId instead\r\n         */\r\n        getTextureByUniqueID(uniqueId: number): Nullable<BaseTexture>;\r\n        /**\r\n         * Gets a camera using its Id\r\n         * @param id defines the Id to look for\r\n         * @returns the camera or null if not found\r\n         * @deprecated Please use getCameraById instead\r\n         */\r\n        getCameraByID(id: string): Nullable<Camera>;\r\n        /**\r\n         * Gets a camera using its unique Id\r\n         * @param uniqueId defines the unique Id to look for\r\n         * @returns the camera or null if not found\r\n         * @deprecated Please use getCameraByUniqueId instead\r\n         */\r\n        getCameraByUniqueID(uniqueId: number): Nullable<Camera>;\r\n        /**\r\n         * Gets a bone using its Id\r\n         * @param id defines the bone's Id\r\n         * @return the bone or null if not found\r\n         * @deprecated Please use getBoneById instead\r\n         */\r\n        getBoneByID(id: string): Nullable<Bone>;\r\n        /**\r\n        * Gets a light node using its Id\r\n        * @param id defines the light's Id\r\n        * @return the light or null if none found.\r\n        * @deprecated Please use getLightById instead\r\n        */\r\n        getLightByID(id: string): Nullable<Light>;\r\n        /**\r\n        * Gets a light node using its scene-generated unique Id\r\n        * @param uniqueId defines the light's unique Id\r\n        * @return the light or null if none found.\r\n        * @deprecated Please use getLightByUniqueId instead\r\n        */\r\n        getLightByUniqueID(uniqueId: number): Nullable<Light>;\r\n        /**\r\n         * Gets a particle system by Id\r\n         * @param id defines the particle system Id\r\n         * @return the corresponding system or null if none found\r\n         * @deprecated Please use getParticleSystemById instead\r\n         */\r\n        getParticleSystemByID(id: string): Nullable<IParticleSystem>;\r\n        /**\r\n         * Gets a geometry using its Id\r\n         * @param id defines the geometry's Id\r\n         * @return the geometry or null if none found.\r\n         * @deprecated Please use getGeometryById instead\r\n         */\r\n        getGeometryByID(id: string): Nullable<Geometry>;\r\n        /**\r\n         * Gets the first added mesh found of a given Id\r\n         * @param id defines the Id to search for\r\n         * @return the mesh found or null if not found at all\r\n         * @deprecated Please use getMeshById instead\r\n         */\r\n        getMeshByID(id: string): Nullable<AbstractMesh>;\r\n        /**\r\n         * Gets a mesh with its auto-generated unique Id\r\n         * @param uniqueId defines the unique Id to search for\r\n         * @return the found mesh or null if not found at all.\r\n         * @deprecated Please use getMeshByUniqueId instead\r\n         */\r\n        getMeshByUniqueID(uniqueId: number): Nullable<AbstractMesh>;\r\n        /**\r\n         * Gets a the last added mesh using a given Id\r\n         * @param id defines the Id to search for\r\n         * @return the found mesh or null if not found at all.\r\n         * @deprecated Please use getLastMeshById instead\r\n         */\r\n        getLastMeshByID(id: string): Nullable<AbstractMesh>;\r\n        /**\r\n         * Gets a list of meshes using their Id\r\n         * @param id defines the Id to search for\r\n         * @returns a list of meshes\r\n         * @deprecated Please use getMeshesById instead\r\n         */\r\n        getMeshesByID(id: string): Array<AbstractMesh>;\r\n        /**\r\n         * Gets the first added transform node found of a given Id\r\n         * @param id defines the Id to search for\r\n         * @return the found transform node or null if not found at all.\r\n         * @deprecated Please use getTransformNodeById instead\r\n         */\r\n        getTransformNodeByID(id: string): Nullable<TransformNode>;\r\n        /**\r\n         * Gets a transform node with its auto-generated unique Id\r\n         * @param uniqueId efines the unique Id to search for\r\n         * @return the found transform node or null if not found at all.\r\n         * @deprecated Please use getTransformNodeByUniqueId instead\r\n         */\r\n        getTransformNodeByUniqueID(uniqueId: number): Nullable<TransformNode>;\r\n        /**\r\n         * Gets a list of transform nodes using their Id\r\n         * @param id defines the Id to search for\r\n         * @returns a list of transform nodes\r\n         * @deprecated Please use getTransformNodesById instead\r\n         */\r\n        getTransformNodesByID(id: string): Array<TransformNode>;\r\n        /**\r\n         * Gets a node (Mesh, Camera, Light) using a given Id\r\n         * @param id defines the Id to search for\r\n         * @return the found node or null if not found at all\r\n         * @deprecated Please use getNodeById instead\r\n         */\r\n        getNodeByID(id: string): Nullable<Node>;\r\n        /**\r\n         * Gets a the last added node (Mesh, Camera, Light) using a given Id\r\n         * @param id defines the Id to search for\r\n         * @return the found node or null if not found at all\r\n         * @deprecated Please use getLastEntryById instead\r\n         */\r\n        getLastEntryByID(id: string): Nullable<Node>;\r\n        /**\r\n         * Gets a skeleton using a given Id (if many are found, this function will pick the last one)\r\n         * @param id defines the Id to search for\r\n         * @return the found skeleton or null if not found at all.\r\n         * @deprecated Please use getLastSkeletonById instead\r\n         */\r\n        getLastSkeletonByID(id: string): Nullable<Skeleton>;\r\n    }\r\n}\r\n\r\n/** @hidden */\r\nexport const _injectLTSScene = (Scene: TypeofScene) => {\r\n    Scene.prototype.setActiveCameraByID = function (id: string): Nullable<Camera> {\r\n        return this.setActiveCameraById(id);\r\n    };\r\n\r\n    Scene.prototype.getLastMaterialByID = function (id: string): Nullable<Material> {\r\n        return this.getLastMaterialById(id);\r\n    };\r\n\r\n    Scene.prototype.getMaterialByID = function (id: string): Nullable<Material> {\r\n        return this.getMaterialById(id);\r\n    };\r\n\r\n    Scene.prototype.getTextureByUniqueID = function (uniqueId: number): Nullable<BaseTexture> {\r\n        return this.getTextureByUniqueId(uniqueId);\r\n    };\r\n\r\n    Scene.prototype.getCameraByID = function (id: string): Nullable<Camera> {\r\n        return this.getCameraById(id);\r\n    };\r\n\r\n    Scene.prototype.getCameraByUniqueID = function (uniqueId: number): Nullable<Camera> {\r\n        return this.getCameraByUniqueId(uniqueId);\r\n    };\r\n\r\n    Scene.prototype.getBoneByID = function (id: string): Nullable<Bone> {\r\n        return this.getBoneById(id);\r\n    };\r\n\r\n    Scene.prototype.getLightByID = function (id: string): Nullable<Light> {\r\n        return this.getLightById(id);\r\n    };\r\n\r\n    Scene.prototype.getLightByUniqueID = function (uniqueId: number): Nullable<Light> {\r\n        return this.getLightByUniqueId(uniqueId);\r\n    };\r\n\r\n    Scene.prototype.getParticleSystemByID = function (id: string): Nullable<IParticleSystem> {\r\n        return this.getParticleSystemById(id);\r\n    };\r\n\r\n    Scene.prototype.getGeometryByID = function (id: string): Nullable<Geometry> {\r\n        return this.getGeometryById(id);\r\n    };\r\n\r\n    Scene.prototype.getMeshByID = function (id: string): Nullable<AbstractMesh> {\r\n        return this.getMeshById(id);\r\n    };\r\n\r\n    Scene.prototype.getMeshesByID = function (id: string): Array<AbstractMesh> {\r\n        return this.getMeshesById(id);\r\n    };\r\n\r\n    Scene.prototype.getTransformNodeByID = function (id: string): Nullable<TransformNode> {\r\n        return this.getTransformNodeById(id);\r\n    };\r\n\r\n    Scene.prototype.getTransformNodeByUniqueID = function (uniqueId: number): Nullable<TransformNode> {\r\n        return this.getTransformNodeByUniqueId(uniqueId);\r\n    };\r\n\r\n    Scene.prototype.getTransformNodesByID = function (id: string): Array<TransformNode> {\r\n        return this.getTransformNodesById(id);\r\n    };\r\n\r\n    Scene.prototype.getMeshByUniqueID = function (uniqueId: number): Nullable<AbstractMesh> {\r\n        return this.getMeshByUniqueId(uniqueId);\r\n    };\r\n\r\n    Scene.prototype.getLastMeshByID = function (id: string): Nullable<AbstractMesh> {\r\n        return this.getLastMeshById(id);\r\n    };\r\n\r\n    Scene.prototype.getLastEntryByID = function (id: string): Nullable<Node> {\r\n        return this.getLastEntryById(id);\r\n    };\r\n\r\n    Scene.prototype.getNodeByID = function (id: string): Nullable<Node> {\r\n        return this.getNodeById(id);\r\n    };\r\n\r\n    Scene.prototype.getLastSkeletonByID = function (id: string): Nullable<Skeleton> {\r\n        return this.getLastSkeletonById(id);\r\n    };\r\n};\r\n"]}