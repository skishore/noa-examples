{"version":3,"file":"boundingBoxRenderer.vertex.js","sourceRoot":"","sources":["../../../sourceES6/core/Shaders/boundingBoxRenderer.vertex.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,wBAAwB,CAAC;AACrD,OAAO,uDAAuD,CAAC;AAC/D,OAAO,oDAAoD,CAAC;AAE5D,IAAI,IAAI,GAAG,iCAAiC,CAAC;AAC7C,IAAI,MAAM,GAAG,uUAeZ,CAAC;AAEF,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;AACxC,cAAc;AACd,MAAM,CAAC,IAAI,+BAA+B,GAAG,EAAE,IAAI,MAAA,EAAE,MAAM,QAAA,EAAE,CAAC","sourcesContent":["import { ShaderStore } from \"../Engines/shaderStore\";\nimport \"./ShadersInclude/boundingBoxRendererVertexDeclaration\";\nimport \"./ShadersInclude/boundingBoxRendererUboDeclaration\";\n\nlet name = 'boundingBoxRendererVertexShader';\nlet shader = `\nattribute vec3 position;\n#include<__decl__boundingBoxRendererVertex>\nvoid main(void) {\nvec4 worldPos=world*vec4(position,1.0);\n#ifdef MULTIVIEW\nif (gl_ViewID_OVR == 0u) {\ngl_Position=viewProjection*worldPos;\n} else {\ngl_Position=viewProjectionR*worldPos;\n}\n#else\ngl_Position=viewProjection*worldPos;\n#endif\n}\n`;\n\nShaderStore.ShadersStore[name] = shader;\n/** @hidden */\nexport var boundingBoxRendererVertexShader = { name, shader };\n"]}