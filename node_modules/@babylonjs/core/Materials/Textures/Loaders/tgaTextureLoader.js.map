{"version":3,"file":"tgaTextureLoader.js","sourceRoot":"","sources":["../../../../../sourceES6/core/Materials/Textures/Loaders/tgaTextureLoader.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAC;AAEhE,OAAO,EAAE,MAAM,EAAE,MAAM,yBAAyB,CAAC;AAGjD,OAAO,EAAE,QAAQ,EAAE,MAAM,2BAA2B,CAAC;AAErD;;;GAGG;AACH;IAAA;QACI;;WAEG;QACa,oBAAe,GAAG,KAAK,CAAC;IAsC5C,CAAC;IApCG;;;;OAIG;IACI,mCAAO,GAAd,UAAe,SAAiB;QAC5B,OAAO,QAAQ,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;IACvC,CAAC;IAED;;;;;;;OAOG;IACI,wCAAY,GAAnB,UAAoB,IAAyC,EAAE,OAAwB,EAAE,iBAA0B,EAAE,MAAsC,EAAE,OAA8D;QACvN,MAAM,6BAA6B,CAAC;IACxC,CAAC;IAED;;;;;OAKG;IACI,oCAAQ,GAAf,UAAgB,IAAqB,EAAE,OAAwB,EAC3D,QAA+G;QAC/G,IAAI,KAAK,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAE1E,IAAI,MAAM,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC;QACjC,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,eAAe,EAAE,KAAK,EAAE;YAClE,aAAa,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;IACP,CAAC;IACL,wBAAC;AAAD,CAAC,AA1CD,IA0CC;;AAED,uBAAuB;AACvB,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,iBAAiB,EAAE,CAAC,CAAC","sourcesContent":["import { GetTGAHeader, UploadContent } from \"../../../Misc/tga\";\r\nimport { Nullable } from \"../../../types\";\r\nimport { Engine } from \"../../../Engines/engine\";\r\nimport { InternalTexture } from \"../../../Materials/Textures/internalTexture\";\r\nimport { IInternalTextureLoader } from \"../../../Materials/Textures/internalTextureLoader\";\r\nimport { EndsWith } from '../../../Misc/stringTools';\r\n\r\n/**\r\n * Implementation of the TGA Texture Loader.\r\n * @hidden\r\n */\r\nexport class _TGATextureLoader implements IInternalTextureLoader {\r\n    /**\r\n     * Defines whether the loader supports cascade loading the different faces.\r\n     */\r\n    public readonly supportCascades = false;\r\n\r\n    /**\r\n     * This returns if the loader support the current file information.\r\n     * @param extension defines the file extension of the file being loaded\r\n     * @returns true if the loader can load the specified file\r\n     */\r\n    public canLoad(extension: string): boolean {\r\n        return EndsWith(extension, \".tga\");\r\n    }\r\n\r\n    /**\r\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\r\n     * @param data contains the texture data\r\n     * @param texture defines the BabylonJS internal texture\r\n     * @param createPolynomials will be true if polynomials have been requested\r\n     * @param onLoad defines the callback to trigger once the texture is ready\r\n     * @param onError defines the callback to trigger in case of error\r\n     */\r\n    public loadCubeData(data: ArrayBufferView | ArrayBufferView[], texture: InternalTexture, createPolynomials: boolean, onLoad: Nullable<(data?: any) => void>, onError: Nullable<(message?: string, exception?: any) => void>): void {\r\n        throw \".env not supported in Cube.\";\r\n    }\r\n\r\n    /**\r\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\r\n     * @param data contains the texture data\r\n     * @param texture defines the BabylonJS internal texture\r\n     * @param callback defines the method to call once ready to upload\r\n     */\r\n    public loadData(data: ArrayBufferView, texture: InternalTexture,\r\n        callback: (width: number, height: number, loadMipmap: boolean, isCompressed: boolean, done: () => void) => void): void {\r\n        var bytes = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\r\n\r\n        var header = GetTGAHeader(bytes);\r\n        callback(header.width, header.height, texture.generateMipMaps, false, () => {\r\n            UploadContent(texture, bytes);\r\n        });\r\n    }\r\n}\r\n\r\n// Register the loader.\r\nEngine._TextureLoaders.push(new _TGATextureLoader());\r\n"]}