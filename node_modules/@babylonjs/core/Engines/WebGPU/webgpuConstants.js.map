{"version":3,"file":"webgpuConstants.js","sourceRoot":"","sources":["../../../../sourceES6/core/Engines/WebGPU/webgpuConstants.ts"],"names":[],"mappings":"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","sourcesContent":["/** @hidden */\nexport enum PowerPreference {\n    SRGB = \"srgb\"\n}\n\n/** @hidden */\nexport enum PowerPreference {\n    LowPower = \"low-power\",\n    HighPerformance = \"high-performance\"\n}\n\n/** @hidden */\nexport enum FeatureName {\n    DepthClipControl = \"depth-clip-control\",\n    Depth24UnormStencil8 = \"depth24unorm-stencil8\",\n    Depth32FloatStencil8 = \"depth32float-stencil8\",\n    TextureCompressionBC = \"texture-compression-bc\",\n    TextureCompressionETC2 = \"texture-compression-etc2\",\n    TextureCompressionASTC = \"texture-compression-astc\",\n    TimestampQuery = \"timestamp-query\",\n    IndirectFirstInstance = \"indirect-first-instance\",\n}\n\n/** @hidden */\nexport enum BufferUsage {\n    MapRead = 1,\n    MapWrite = 2,\n    CopySrc = 4,\n    CopyDst = 8,\n    Index = 16,\n    Vertex = 32,\n    Uniform = 64,\n    Storage = 128,\n    Indirect = 256,\n    QueryResolve = 512\n}\n\n/** @hidden */\nexport enum MapMode {\n    Read = 1,\n    Write = 2\n}\n\n/** @hidden */\nexport enum TextureDimension {\n    E1d = \"1d\",\n    E2d = \"2d\",\n    E3d = \"3d\"\n}\n\n/** @hidden */\nexport enum TextureUsage {\n    CopySrc = 1,\n    CopyDst = 2,\n    TextureBinding = 4,\n    StorageBinding = 8,\n    RenderAttachment = 16\n}\n\n/** @hidden */\nexport enum TextureViewDimension {\n    E1d = \"1d\",\n    E2d = \"2d\",\n    E2dArray = \"2d-array\",\n    Cube = \"cube\",\n    CubeArray = \"cube-array\",\n    E3d = \"3d\"\n}\n\n/** @hidden */\nexport enum TextureAspect {\n    All = \"all\",\n    StencilOnly = \"stencil-only\",\n    DepthOnly = \"depth-only\"\n}\n\n/**\n * Comments taken from https://github.com/gfx-rs/wgpu/blob/master/wgpu-types/src/lib.rs\n * @hidden\n */\nexport enum TextureFormat {\n    // 8-bit formats\n    R8Unorm = \"r8unorm\",    // Red channel only. 8 bit integer per channel. [0, 255] converted to/from float [0, 1] in shader.\n    R8Snorm = \"r8snorm\",    // Red channel only. 8 bit integer per channel. [-127, 127] converted to/from float [-1, 1] in shader.\n    R8Uint = \"r8uint\",      // Red channel only. 8 bit integer per channel. Unsigned in shader.\n    R8Sint = \"r8sint\",      // Red channel only. 8 bit integer per channel. Signed in shader.\n\n    // 16-bit formats\n    R16Uint = \"r16uint\",    // Red channel only. 16 bit integer per channel. Unsigned in shader.\n    R16Sint = \"r16sint\",    // Red channel only. 16 bit integer per channel. Signed in shader.\n    R16Float = \"r16float\",  // Red channel only. 16 bit float per channel. Float in shader.\n    RG8Unorm = \"rg8unorm\",  // Red and green channels. 8 bit integer per channel. [0, 255] converted to/from float [0, 1] in shader.\n    RG8Snorm = \"rg8snorm\",  // Red and green channels. 8 bit integer per channel. [-127, 127] converted to/from float [-1, 1] in shader.\n    RG8Uint = \"rg8uint\",    // Red and green channels. 8 bit integer per channel. Unsigned in shader.\n    RG8Sint = \"rg8sint\",    // Red and green channels. 8 bit integer per channel. Signed in shader.\n\n    // 32-bit formats\n    R32Uint = \"r32uint\",                // Red channel only. 32 bit integer per channel. Unsigned in shader.\n    R32Sint = \"r32sint\",                // Red channel only. 32 bit integer per channel. Signed in shader.\n    R32Float = \"r32float\",              // Red channel only. 32 bit float per channel. Float in shader.\n    RG16Uint = \"rg16uint\",              // Red and green channels. 16 bit integer per channel. Unsigned in shader.\n    RG16Sint = \"rg16sint\",              // Red and green channels. 16 bit integer per channel. Signed in shader.\n    RG16Float = \"rg16float\",            // Red and green channels. 16 bit float per channel. Float in shader.\n    RGBA8Unorm = \"rgba8unorm\",          // Red, green, blue, and alpha channels. 8 bit integer per channel. [0, 255] converted to/from float [0, 1] in shader.\n    RGBA8UnormSRGB = \"rgba8unorm-srgb\", // Red, green, blue, and alpha channels. 8 bit integer per channel. Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.\n    RGBA8Snorm = \"rgba8snorm\",          // Red, green, blue, and alpha channels. 8 bit integer per channel. [-127, 127] converted to/from float [-1, 1] in shader.\n    RGBA8Uint = \"rgba8uint\",            // Red, green, blue, and alpha channels. 8 bit integer per channel. Unsigned in shader.\n    RGBA8Sint = \"rgba8sint\",            // Red, green, blue, and alpha channels. 8 bit integer per channel. Signed in shader.\n    BGRA8Unorm = \"bgra8unorm\",          // Blue, green, red, and alpha channels. 8 bit integer per channel. [0, 255] converted to/from float [0, 1] in shader.\n    BGRA8UnormSRGB = \"bgra8unorm-srgb\", // Blue, green, red, and alpha channels. 8 bit integer per channel. Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.\n    // Packed 32-bit formats\n    RGB9E5UFloat = \"rgb9e5ufloat\",      // Packed unsigned float with 9 bits mantisa for each RGB component, then a common 5 bits exponent\n    RGB10A2Unorm = \"rgb10a2unorm\",      // Red, green, blue, and alpha channels. 10 bit integer for RGB channels, 2 bit integer for alpha channel. [0, 1023] ([0, 3] for alpha) converted to/from float [0, 1] in shader.\n    RG11B10UFloat = \"rg11b10ufloat\",    // Red, green, and blue channels. 11 bit float with no sign bit for RG channels. 10 bit float with no sign bit for blue channel. Float in shader.\n\n    // 64-bit formats\n    RG32Uint = \"rg32uint\",              // Red and green channels. 32 bit integer per channel. Unsigned in shader.\n    RG32Sint = \"rg32sint\",              // Red and green channels. 32 bit integer per channel. Signed in shader.\n    RG32Float = \"rg32float\",            // Red and green channels. 32 bit float per channel. Float in shader.\n    RGBA16Uint = \"rgba16uint\",          // Red, green, blue, and alpha channels. 16 bit integer per channel. Unsigned in shader.\n    RGBA16Sint = \"rgba16sint\",          // Red, green, blue, and alpha channels. 16 bit integer per channel. Signed in shader.\n    RGBA16Float = \"rgba16float\",        // Red, green, blue, and alpha channels. 16 bit float per channel. Float in shader.\n\n    // 128-bit formats\n    RGBA32Uint = \"rgba32uint\",          // Red, green, blue, and alpha channels. 32 bit integer per channel. Unsigned in shader.\n    RGBA32Sint = \"rgba32sint\",          // Red, green, blue, and alpha channels. 32 bit integer per channel. Signed in shader.\n    RGBA32Float = \"rgba32float\",        // Red, green, blue, and alpha channels. 32 bit float per channel. Float in shader.\n\n    // Depth and stencil formats\n    Stencil8 = \"stencil8\",\n    Depth16Unorm = \"depth16unorm\",\n    Depth24Plus = \"depth24plus\",                    // Special depth format with at least 24 bit integer depth.\n    Depth24PlusStencil8 = \"depth24plus-stencil8\",   // Special depth/stencil format with at least 24 bit integer depth and 8 bits integer stencil.\n    Depth32Float = \"depth32float\",                  // Special depth format with 32 bit floating point depth.\n\n    // BC compressed formats usable if \"texture-compression-bc\" is both\n    // supported by the device/user agent and enabled in requestDevice.\n    BC1RGBAUnorm = \"bc1-rgba-unorm\",            // 4x4 block compressed texture. 8 bytes per block (4 bit/px). 4 color + alpha pallet. 5 bit R + 6 bit G + 5 bit B + 1 bit alpha. Also known as DXT1.\n    BC1RGBAUnormSRGB = \"bc1-rgba-unorm-srgb\",   // 4x4 block compressed texture. 8 bytes per block (4 bit/px). 4 color + alpha pallet. 5 bit R + 6 bit G + 5 bit B + 1 bit alpha. Also known as DXT1.\n    BC2RGBAUnorm = \"bc2-rgba-unorm\",            // 4x4 block compressed texture. 16 bytes per block (8 bit/px). 4 color pallet. 5 bit R + 6 bit G + 5 bit B + 4 bit alpha. Also known as DXT3.\n    BC2RGBAUnormSRGB = \"bc2-rgba-unorm-srgb\",   // 4x4 block compressed texture. 16 bytes per block (8 bit/px). 4 color pallet. 5 bit R + 6 bit G + 5 bit B + 4 bit alpha. Also known as DXT3.\n    BC3RGBAUnorm = \"bc3-rgba-unorm\",            // 4x4 block compressed texture. 16 bytes per block (8 bit/px). 4 color pallet + 8 alpha pallet. 5 bit R + 6 bit G + 5 bit B + 8 bit alpha. Also known as DXT5.\n    BC3RGBAUnormSRGB = \"bc3-rgba-unorm-srgb\",   // 4x4 block compressed texture. 16 bytes per block (8 bit/px). 4 color pallet + 8 alpha pallet. 5 bit R + 6 bit G + 5 bit B + 8 bit alpha. Also known as DXT5.\n    BC4RUnorm = \"bc4-r-unorm\",                  // 4x4 block compressed texture. 8 bytes per block (4 bit/px). 8 color pallet. 8 bit R. Also known as RGTC1.\n    BC4RSnorm = \"bc4-r-snorm\",                  // 4x4 block compressed texture. 8 bytes per block (4 bit/px). 8 color pallet. 8 bit R. Also known as RGTC1.\n    BC5RGUnorm = \"bc5-rg-unorm\",                // 4x4 block compressed texture. 16 bytes per block (8 bit/px). 8 color red pallet + 8 color green pallet. 8 bit RG. Also known as RGTC2.\n    BC5RGSnorm = \"bc5-rg-snorm\",                // 4x4 block compressed texture. 16 bytes per block (8 bit/px). 8 color red pallet + 8 color green pallet. 8 bit RG. Also known as RGTC2.\n    BC6HRGBUFloat = \"bc6h-rgb-ufloat\",          // 4x4 block compressed texture. 16 bytes per block (8 bit/px). Variable sized pallet. 16 bit unsigned float RGB. Float in shader. Also known as BPTC (float).\n    BC6HRGBFloat = \"bc6h-rgb-float\",            // 4x4 block compressed texture. 16 bytes per block (8 bit/px). Variable sized pallet. 16 bit signed float RGB. Float in shader. Also known as BPTC (float).\n    BC7RGBAUnorm = \"bc7-rgba-unorm\",            // 4x4 block compressed texture. 16 bytes per block (8 bit/px). Variable sized pallet. 8 bit integer RGBA. Also known as BPTC (unorm).\n    BC7RGBAUnormSRGB = \"bc7-rgba-unorm-srgb\",   // 4x4 block compressed texture. 16 bytes per block (8 bit/px). Variable sized pallet. 8 bit integer RGBA. Also known as BPTC (unorm).\n\n    // ETC2 compressed formats usable if \"texture-compression-etc2\" is both\n    // supported by the device/user agent and enabled in requestDevice.\n    ETC2RGB8Unorm = \"etc2-rgb8unorm\",               // 4x4 block compressed texture. 8 bytes per block (4 bit/px). Complex pallet. 8 bit integer RGB.\n    ETC2RGB8UnormSRGB = \"etc2-rgb8unorm-srgb\",      // 4x4 block compressed texture. 8 bytes per block (4 bit/px). Complex pallet. 8 bit integer RGB.\n    ETC2RGB8A1Unorm = \"etc2-rgb8a1unorm\",           // 4x4 block compressed texture. 8 bytes per block (4 bit/px). Complex pallet. 8 bit integer RGB + 1 bit alpha.\n    ETC2RGB8A1UnormSRGB = \"etc2-rgb8a1unorm-srgb\",  // 4x4 block compressed texture. 8 bytes per block (4 bit/px). Complex pallet. 8 bit integer RGB + 1 bit alpha.\n    ETC2RGBA8Unorm = \"etc2-rgba8unorm\",             // 4x4 block compressed texture. 16 bytes per block (8 bit/px). Complex pallet. 8 bit integer RGB + 8 bit alpha.\n    ETC2RGBA8UnormSRGB = \"etc2-rgba8unorm-srgb\",    // 4x4 block compressed texture. 16 bytes per block (8 bit/px). Complex pallet. 8 bit integer RGB + 8 bit alpha.\n    EACR11Unorm = \"eac-r11unorm\",                   // 4x4 block compressed texture. 8 bytes per block (4 bit/px). Complex pallet. 11 bit integer R.\n    EACR11Snorm = \"eac-r11snorm\",                   // 4x4 block compressed texture. 8 bytes per block (4 bit/px). Complex pallet. 11 bit integer R.\n    EACRG11Unorm = \"eac-rg11unorm\",                 // 4x4 block compressed texture. 16 bytes per block (8 bit/px). Complex pallet. 11 bit integer R + 11 bit integer G.\n    EACRG11Snorm = \"eac-rg11snorm\",                 // 4x4 block compressed texture. 16 bytes per block (8 bit/px). Complex pallet. 11 bit integer R + 11 bit integer G.\n\n    // ASTC compressed formats usable if \"texture-compression-astc\" is both\n    // supported by the device/user agent and enabled in requestDevice.\n    ASTC4x4Unorm = \"astc-4x4-unorm\",                // 4x4 block compressed texture. 16 bytes per block (8 bit/px). Complex pallet. 8 bit integer RGBA.\n    ASTC4x4UnormSRGB = \"astc-4x4-unorm-srgb\",       // 4x4 block compressed texture. 16 bytes per block (8 bit/px). Complex pallet. 8 bit integer RGBA.\n    ASTC5x4Unorm = \"astc-5x4-unorm\",                // 5x4 block compressed texture. 16 bytes per block (6.4 bit/px). Complex pallet. 8 bit integer RGBA.\n    ASTC5x4UnormSRGB = \"astc-5x4-unorm-srgb\",       // 5x4 block compressed texture. 16 bytes per block (6.4 bit/px). Complex pallet. 8 bit integer RGBA.\n    ASTC5x5Unorm = \"astc-5x5-unorm\",                // 5x5 block compressed texture. 16 bytes per block (5.12 bit/px). Complex pallet. 8 bit integer RGBA.\n    ASTC5x5UnormSRGB = \"astc-5x5-unorm-srgb\",       // 5x5 block compressed texture. 16 bytes per block (5.12 bit/px). Complex pallet. 8 bit integer RGBA.\n    ASTC6x5Unorm = \"astc-6x5-unorm\",                // 6x5 block compressed texture. 16 bytes per block (4.27 bit/px). Complex pallet. 8 bit integer RGBA.\n    ASTC6x5UnormSRGB = \"astc-6x5-unorm-srgb\",       // 6x5 block compressed texture. 16 bytes per block (4.27 bit/px). Complex pallet. 8 bit integer RGBA.\n    ASTC6x6Unorm = \"astc-6x6-unorm\",                // 6x6 block compressed texture. 16 bytes per block (3.56 bit/px). Complex pallet. 8 bit integer RGBA.\n    ASTC6x6UnormSRGB = \"astc-6x6-unorm-srgb\",       // 6x6 block compressed texture. 16 bytes per block (3.56 bit/px). Complex pallet. 8 bit integer RGBA.\n    ASTC8x5Unorm = \"astc-8x5-unorm\",                // 8x5 block compressed texture. 16 bytes per block (3.2 bit/px). Complex pallet. 8 bit integer RGBA.\n    ASTC8x5UnormSRGB = \"astc-8x5-unorm-srgb\",       // 8x5 block compressed texture. 16 bytes per block (3.2 bit/px). Complex pallet. 8 bit integer RGBA.\n    ASTC8x6Unorm = \"astc-8x6-unorm\",                // 8x6 block compressed texture. 16 bytes per block (2.67 bit/px). Complex pallet. 8 bit integer RGBA.\n    ASTC8x6UnormSRGB = \"astc-8x6-unorm-srgb\",       // 8x6 block compressed texture. 16 bytes per block (2.67 bit/px). Complex pallet. 8 bit integer RGBA.\n    ASTC8x8Unorm = \"astc-8x8-unorm\",                // 8x8 block compressed texture. 16 bytes per block (2 bit/px). Complex pallet. 8 bit integer RGBA.\n    ASTC8x8UnormSRGB = \"astc-8x8-unorm-srgb\",       // 8x8 block compressed texture. 16 bytes per block (2 bit/px). Complex pallet. 8 bit integer RGBA.\n    ASTC10x5Unorm = \"astc-10x5-unorm\",              // 10x5 block compressed texture. 16 bytes per block (2.56 bit/px). Complex pallet. 8 bit integer RGBA.\n    ASTC10x5UnormSRGB = \"astc-10x5-unorm-srgb\",     // 10x5 block compressed texture. 16 bytes per block (2.56 bit/px). Complex pallet. 8 bit integer RGBA.\n    ASTC10x6Unorm = \"astc-10x6-unorm\",              // 10x6 block compressed texture. 16 bytes per block (2.13 bit/px). Complex pallet. 8 bit integer RGBA.\n    ASTC10x6UnormSRGB = \"astc-10x6-unorm-srgb\",     // 10x6 block compressed texture. 16 bytes per block (2.13 bit/px). Complex pallet. 8 bit integer RGBA.\n    ASTC10x8Unorm = \"astc-10x8-unorm\",              // 10x8 block compressed texture. 16 bytes per block (1.6 bit/px). Complex pallet. 8 bit integer RGBA.\n    ASTC10x8UnormSRGB = \"astc-10x8-unorm-srgb\",     // 10x8 block compressed texture. 16 bytes per block (1.6 bit/px). Complex pallet. 8 bit integer RGBA.\n    ASTC10x10Unorm = \"astc-10x10-unorm\",            // 10x10 block compressed texture. 16 bytes per block (1.28 bit/px). Complex pallet. 8 bit integer RGBA.\n    ASTC10x10UnormSRGB = \"astc-10x10-unorm-srgb\",   // 10x10 block compressed texture. 16 bytes per block (1.28 bit/px). Complex pallet. 8 bit integer RGBA.\n    ASTC12x10Unorm = \"astc-12x10-unorm\",            // 12x10 block compressed texture. 16 bytes per block (1.07 bit/px). Complex pallet. 8 bit integer RGBA.\n    ASTC12x10UnormSRGB = \"astc-12x10-unorm-srgb\",   // 12x10 block compressed texture. 16 bytes per block (1.07 bit/px). Complex pallet. 8 bit integer RGBA.\n    ASTC12x12Unorm = \"astc-12x12-unorm\",            // 12x12 block compressed texture. 16 bytes per block (0.89 bit/px). Complex pallet. 8 bit integer RGBA.\n    ASTC12x12UnormSRGB = \"astc-12x12-unorm-srgb\",   // 12x12 block compressed texture. 16 bytes per block (0.89 bit/px). Complex pallet. 8 bit integer RGBA.\n\n    // \"depth24unorm-stencil8\" feature\n    Depth24UnormStencil8 = \"depth24unorm-stencil8\",\n\n    // \"depth32float-stencil8\" feature\n    Depth32FloatStencil8 = \"depth32float-stencil8\"\n}\n\n/** @hidden */\nexport enum AddressMode {\n    ClampToEdge = \"clamp-to-edge\",\n    Repeat = \"repeat\",\n    MirrorRepeat = \"mirror-repeat\"\n}\n\n/** @hidden */\nexport enum FilterMode {\n    Nearest = \"nearest\",\n    Linear = \"linear\"\n}\n\n/** @hidden */\nexport enum CompareFunction {\n    Never = \"never\",\n    Less = \"less\",\n    Equal = \"equal\",\n    LessEqual = \"less-equal\",\n    Greater = \"greater\",\n    NotEqual = \"not-equal\",\n    GreaterEqual = \"greater-equal\",\n    Always = \"always\"\n}\n\n/** @hidden */\nexport enum ShaderStage {\n    Vertex = 1,\n    Fragment = 2,\n    Compute = 4\n}\n\n/** @hidden */\nexport enum BufferBindingType {\n    Uniform = \"uniform\",\n    Storage = \"storage\",\n    ReadOnlyStorage = \"read-only-storage\"\n}\n\n/** @hidden */\nexport enum SamplerBindingType {\n    Filtering = \"filtering\",\n    NonFiltering = \"non-filtering\",\n    Comparison = \"comparison\"\n}\n\n/** @hidden */\nexport enum TextureSampleType {\n    Float = \"float\",\n    UnfilterableFloat = \"unfilterable-float\",\n    Depth = \"depth\",\n    Sint = \"sint\",\n    Uint = \"uint\"\n}\n\n/** @hidden */\nexport enum StorageTextureAccess {\n    WriteOnly = \"write-only\"\n}\n\n/** @hidden */\nexport enum CompilationMessageType {\n    Error = \"error\",\n    Warning = \"warning\",\n    Info = \"info\"\n}\n\n/** @hidden */\nexport enum PrimitiveTopology {\n    PointList = \"point-list\",\n    LineList = \"line-list\",\n    LineStrip = \"line-strip\",\n    TriangleList = \"triangle-list\",\n    TriangleStrip = \"triangle-strip\"\n}\n\n/** @hidden */\nexport enum FrontFace {\n    CCW = \"ccw\",\n    CW = \"cw\"\n}\n\n/** @hidden */\nexport enum CullMode {\n    None = \"none\",\n    Front = \"front\",\n    Back = \"back\"\n}\n\n/** @hidden */\nexport enum ColorWrite {\n    Red = 1,\n    Green = 2,\n    Blue = 4,\n    Alpha = 8,\n    All = 15\n}\n\n/** @hidden */\nexport enum BlendFactor {\n    Zero = \"zero\",\n    One = \"one\",\n    Src = \"src\",\n    OneMinusSrc = \"one-minus-src\",\n    SrcAlpha = \"src-alpha\",\n    OneMinusSrcAlpha = \"one-minus-src-alpha\",\n    Dst = \"dst\",\n    OneMinusDst = \"one-minus-dst\",\n    DstAlpha = \"dst-alpha\",\n    OneMinusDstAlpha = \"one-minus-dst-alpha\",\n    SrcAlphaSaturated = \"src-alpha-saturated\",\n    Constant = \"constant\",\n    OneMinusConstant = \"one-minus-constant\"\n}\n\n/** @hidden */\nexport enum BlendOperation {\n    Add = \"add\",\n    Subtract = \"subtract\",\n    ReverseSubtract = \"reverse-subtract\",\n    Min = \"min\",\n    Max = \"max\"\n}\n\n/** @hidden */\nexport enum StencilOperation {\n    Keep = \"keep\",\n    Zero = \"zero\",\n    Replace = \"replace\",\n    Invert = \"invert\",\n    IncrementClamp = \"increment-clamp\",\n    DecrementClamp = \"decrement-clamp\",\n    IncrementWrap = \"increment-wrap\",\n    DecrementWrap = \"decrement-wrap\"\n}\n\n/** @hidden */\nexport enum IndexFormat {\n    Uint16 = \"uint16\",\n    Uint32 = \"uint32\"\n}\n\n/** @hidden */\nexport enum VertexFormat {\n    Uint8x2 = \"uint8x2\",\n    Uint8x4 = \"uint8x4\",\n    Sint8x2 = \"sint8x2\",\n    Sint8x4 = \"sint8x4\",\n    Unorm8x2 = \"unorm8x2\",\n    Unorm8x4 = \"unorm8x4\",\n    Snorm8x2 = \"snorm8x2\",\n    Snorm8x4 = \"snorm8x4\",\n    Uint16x2 = \"uint16x2\",\n    Uint16x4 = \"uint16x4\",\n    Sint16x2 = \"sint16x2\",\n    Sint16x4 = \"sint16x4\",\n    Unorm16x2 = \"unorm16x2\",\n    Unorm16x4 = \"unorm16x4\",\n    Snorm16x2 = \"snorm16x2\",\n    Snorm16x4 = \"snorm16x4\",\n    Float16x2 = \"float16x2\",\n    Float16x4 = \"float16x4\",\n    Float32 = \"float32\",\n    Float32x2 = \"float32x2\",\n    Float32x3 = \"float32x3\",\n    Float32x4 = \"float32x4\",\n    Uint32 = \"uint32\",\n    Uint32x2 = \"uint32x2\",\n    Uint32x3 = \"uint32x3\",\n    Uint32x4 = \"uint32x4\",\n    Sint32 = \"sint32\",\n    Sint32x2 = \"sint32x2\",\n    Sint32x3 = \"sint32x3\",\n    Sint32x4 = \"sint32x4\"\n}\n\n/** @hidden */\nexport enum InputStepMode {\n    Vertex = \"vertex\",\n    Instance = \"instance\"\n}\n\n/** @hidden */\nexport enum ComputePassTimestampLocation {\n    Beginning = \"beginning\",\n    End = \"end\"\n}\n\n/** @hidden */\nexport enum RenderPassTimestampLocation {\n    Beginning = \"beginning\",\n    End = \"end\"\n}\n\n/** @hidden */\nexport enum LoadOp {\n    Load = \"load\"\n}\n\n/** @hidden */\nexport enum StoreOp {\n    Store = \"store\",\n    Discard = \"discard\"\n}\n\n/** @hidden */\nexport enum QueryType {\n    Occlusion = \"occlusion\",\n    Timestamp = \"timestamp\"\n}\n\n/** @hidden */\nexport enum CanvasCompositingAlphaMode {\n    Opaque = \"opaque\",\n    Premultiplied = \"premultiplied\"\n}\n\n/** @hidden */\nexport enum DeviceLostReason {\n    Destroyed = \"destroyed\"\n}\n\n/** @hidden */\nexport enum ErrorFilter {\n    OutOfMemory = \"out-of-memory\",\n    Validation = \"validation\"\n}\n"]}