{"version":3,"file":"targetCamera.js","sourceRoot":"","sources":["../../../sourceES6/core/Cameras/targetCamera.ts"],"names":[],"mappings":"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","sourcesContent":["import { serialize, serializeAsVector3, serializeAsMeshReference } from \"../Misc/decorators\";\nimport { Nullable } from \"../types\";\nimport { Camera } from \"./camera\";\nimport { Scene } from \"../scene\";\nimport { Quaternion, Matrix, Vector3, Vector2, TmpVectors } from \"../Maths/math.vector\";\nimport { Epsilon } from '../Maths/math.constants';\nimport { Axis } from '../Maths/math.axis';\n/**\n * A target camera takes a mesh or position as a target and continues to look at it while it moves.\n * This is the base of the follow, arc rotate cameras and Free camera\n * @see https://doc.babylonjs.com/features/cameras\n */\nexport class TargetCamera extends Camera {\n    private static _RigCamTransformMatrix = new Matrix();\n    private static _TargetTransformMatrix = new Matrix();\n    private static _TargetFocalPoint = new Vector3();\n\n    private _tmpUpVector = Vector3.Zero();\n    private _tmpTargetVector = Vector3.Zero();\n\n    /**\n     * Define the current direction the camera is moving to\n     */\n    public cameraDirection = new Vector3(0, 0, 0);\n    /**\n     * Define the current rotation the camera is rotating to\n     */\n    public cameraRotation = new Vector2(0, 0);\n\n    /** Gets or sets a boolean indicating that the scaling of the parent hierarchy will not be taken in account by the camera */\n    public ignoreParentScaling = false;\n\n    /**\n     * When set, the up vector of the camera will be updated by the rotation of the camera\n     */\n    public updateUpVectorFromRotation = false;\n    private _tmpQuaternion = new Quaternion();\n\n    /**\n     * Define the current rotation of the camera\n     */\n    @serializeAsVector3()\n    public rotation = new Vector3(0, 0, 0);\n\n    /**\n     * Define the current rotation of the camera as a quaternion to prevent Gimbal lock\n     */\n    public rotationQuaternion: Quaternion;\n\n    /**\n     * Define the current speed of the camera\n     */\n    @serialize()\n    public speed = 2.0;\n\n    /**\n     * Add constraint to the camera to prevent it to move freely in all directions and\n     * around all axis.\n     */\n    public noRotationConstraint = false;\n\n    /**\n     * Reverses mouselook direction to 'natural' panning as opposed to traditional direct\n     * panning\n     */\n    public invertRotation = false;\n\n    /**\n     * Speed multiplier for inverse camera panning\n     */\n    public inverseRotationSpeed = 0.2;\n\n    /**\n     * Define the current target of the camera as an object or a position.\n     */\n    @serializeAsMeshReference(\"lockedTargetId\")\n    public lockedTarget: any = null;\n\n    /** @hidden */\n    public _currentTarget = Vector3.Zero();\n    /** @hidden */\n    public _initialFocalDistance = 1;\n    /** @hidden */\n    public _viewMatrix = Matrix.Zero();\n    /** @hidden */\n    public _camMatrix = Matrix.Zero();\n    /** @hidden */\n    public _cameraTransformMatrix = Matrix.Zero();\n    /** @hidden */\n    public _cameraRotationMatrix = Matrix.Zero();\n\n    /** @hidden */\n    public _referencePoint = new Vector3(0, 0, 1);\n    /** @hidden */\n    public _transformedReferencePoint = Vector3.Zero();\n\n    /** @hidden */\n    public _reset: () => void;\n\n    private _defaultUp = Vector3.Up();\n\n    /**\n     * Instantiates a target camera that takes a mesh or position as a target and continues to look at it while it moves.\n     * This is the base of the follow, arc rotate cameras and Free camera\n     * @see https://doc.babylonjs.com/features/cameras\n     * @param name Defines the name of the camera in the scene\n     * @param position Defines the start position of the camera in the scene\n     * @param scene Defines the scene the camera belongs to\n     * @param setActiveOnSceneIfNoneActive Defines whether the camera should be marked as active if not other active cameras have been defined\n     */\n    constructor(name: string, position: Vector3, scene: Scene, setActiveOnSceneIfNoneActive = true) {\n        super(name, position, scene, setActiveOnSceneIfNoneActive);\n    }\n\n    /**\n     * Gets the position in front of the camera at a given distance.\n     * @param distance The distance from the camera we want the position to be\n     * @returns the position\n     */\n    public getFrontPosition(distance: number): Vector3 {\n        this.getWorldMatrix();\n        var direction = this.getTarget().subtract(this.position);\n        direction.normalize();\n        direction.scaleInPlace(distance);\n        return this.globalPosition.add(direction);\n    }\n\n    /** @hidden */\n    public _getLockedTargetPosition(): Nullable<Vector3> {\n        if (!this.lockedTarget) {\n            return null;\n        }\n\n        if (this.lockedTarget.absolutePosition) {\n            this.lockedTarget.computeWorldMatrix();\n        }\n\n        return this.lockedTarget.absolutePosition || this.lockedTarget;\n    }\n\n    private _storedPosition: Vector3;\n    private _storedRotation: Vector3;\n    private _storedRotationQuaternion: Quaternion;\n\n    /**\n     * Store current camera state of the camera (fov, position, rotation, etc..)\n     * @returns the camera\n     */\n    public storeState(): Camera {\n        this._storedPosition = this.position.clone();\n        this._storedRotation = this.rotation.clone();\n        if (this.rotationQuaternion) {\n            this._storedRotationQuaternion = this.rotationQuaternion.clone();\n        }\n\n        return super.storeState();\n    }\n\n    /**\n     * Restored camera state. You must call storeState() first\n     * @returns whether it was successful or not\n     * @hidden\n     */\n    public _restoreStateValues(): boolean {\n        if (!super._restoreStateValues()) {\n            return false;\n        }\n\n        this.position = this._storedPosition.clone();\n        this.rotation = this._storedRotation.clone();\n\n        if (this.rotationQuaternion) {\n            this.rotationQuaternion = this._storedRotationQuaternion.clone();\n        }\n\n        this.cameraDirection.copyFromFloats(0, 0, 0);\n        this.cameraRotation.copyFromFloats(0, 0);\n\n        return true;\n    }\n\n    /** @hidden */\n    public _initCache() {\n        super._initCache();\n        this._cache.lockedTarget = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n        this._cache.rotation = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n        this._cache.rotationQuaternion = new Quaternion(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n    }\n\n    /** @hidden */\n    public _updateCache(ignoreParentClass?: boolean): void {\n        if (!ignoreParentClass) {\n            super._updateCache();\n        }\n\n        var lockedTargetPosition = this._getLockedTargetPosition();\n        if (!lockedTargetPosition) {\n            this._cache.lockedTarget = null;\n        }\n        else {\n            if (!this._cache.lockedTarget) {\n                this._cache.lockedTarget = lockedTargetPosition.clone();\n            }\n            else {\n                this._cache.lockedTarget.copyFrom(lockedTargetPosition);\n            }\n        }\n\n        this._cache.rotation.copyFrom(this.rotation);\n        if (this.rotationQuaternion) {\n            this._cache.rotationQuaternion.copyFrom(this.rotationQuaternion);\n        }\n    }\n\n    // Synchronized\n    /** @hidden */\n    public _isSynchronizedViewMatrix(): boolean {\n        if (!super._isSynchronizedViewMatrix()) {\n            return false;\n        }\n\n        var lockedTargetPosition = this._getLockedTargetPosition();\n\n        return (this._cache.lockedTarget ? this._cache.lockedTarget.equals(lockedTargetPosition) : !lockedTargetPosition)\n            && (this.rotationQuaternion ? this.rotationQuaternion.equals(this._cache.rotationQuaternion) : this._cache.rotation.equals(this.rotation));\n    }\n\n    // Methods\n    /** @hidden */\n    public _computeLocalCameraSpeed(): number {\n        var engine = this.getEngine();\n        return this.speed * Math.sqrt((engine.getDeltaTime() / (engine.getFps() * 100.0)));\n    }\n\n    // Target\n\n    /**\n     * Defines the target the camera should look at.\n     * @param target Defines the new target as a Vector\n     */\n    public setTarget(target: Vector3): void {\n        this.upVector.normalize();\n\n        this._initialFocalDistance = target.subtract(this.position).length();\n\n        if (this.position.z === target.z) {\n            this.position.z += Epsilon;\n        }\n\n        this._referencePoint.normalize().scaleInPlace(this._initialFocalDistance);\n\n        Matrix.LookAtLHToRef(this.position, target, this._defaultUp, this._camMatrix);\n        this._camMatrix.invert();\n\n        this.rotation.x = Math.atan(this._camMatrix.m[6] / this._camMatrix.m[10]);\n\n        var vDir = target.subtract(this.position);\n\n        if (vDir.x >= 0.0) {\n            this.rotation.y = (-Math.atan(vDir.z / vDir.x) + Math.PI / 2.0);\n        } else {\n            this.rotation.y = (-Math.atan(vDir.z / vDir.x) - Math.PI / 2.0);\n        }\n\n        this.rotation.z = 0;\n\n        if (isNaN(this.rotation.x)) {\n            this.rotation.x = 0;\n        }\n\n        if (isNaN(this.rotation.y)) {\n            this.rotation.y = 0;\n        }\n\n        if (isNaN(this.rotation.z)) {\n            this.rotation.z = 0;\n        }\n\n        if (this.rotationQuaternion) {\n            Quaternion.RotationYawPitchRollToRef(this.rotation.y, this.rotation.x, this.rotation.z, this.rotationQuaternion);\n        }\n    }\n\n    /**\n     * Defines the target point of the camera.\n     * The camera looks towards it form the radius distance.\n     */\n    public get target(): Vector3 {\n        return this.getTarget();\n    }\n    public set target(value: Vector3) {\n        this.setTarget(value);\n    }\n\n    /**\n     * Return the current target position of the camera. This value is expressed in local space.\n     * @returns the target position\n     */\n    public getTarget(): Vector3 {\n        return this._currentTarget;\n    }\n\n    /** @hidden */\n    public _decideIfNeedsToMove(): boolean {\n        return Math.abs(this.cameraDirection.x) > 0 || Math.abs(this.cameraDirection.y) > 0 || Math.abs(this.cameraDirection.z) > 0;\n    }\n\n    /** @hidden */\n    public _updatePosition(): void {\n        if (this.parent) {\n            this.parent.getWorldMatrix().invertToRef(TmpVectors.Matrix[0]);\n            Vector3.TransformNormalToRef(this.cameraDirection, TmpVectors.Matrix[0], TmpVectors.Vector3[0]);\n            this.position.addInPlace(TmpVectors.Vector3[0]);\n            return;\n        }\n        this.position.addInPlace(this.cameraDirection);\n    }\n\n    /** @hidden */\n    public _checkInputs(): void {\n        var directionMultiplier = this.invertRotation ? -this.inverseRotationSpeed : 1.0;\n        var needToMove = this._decideIfNeedsToMove();\n        var needToRotate = Math.abs(this.cameraRotation.x) > 0 || Math.abs(this.cameraRotation.y) > 0;\n\n        // Move\n        if (needToMove) {\n            this._updatePosition();\n        }\n\n        // Rotate\n        if (needToRotate) {\n            //rotate, if quaternion is set and rotation was used\n            if (this.rotationQuaternion) {\n                this.rotationQuaternion.toEulerAnglesToRef(this.rotation);\n            }\n\n            this.rotation.x += this.cameraRotation.x * directionMultiplier;\n            this.rotation.y += this.cameraRotation.y * directionMultiplier;\n\n            // Apply constraints\n            if (!this.noRotationConstraint) {\n                var limit = 1.570796;\n\n                if (this.rotation.x > limit) {\n                    this.rotation.x = limit;\n                }\n                if (this.rotation.x < -limit) {\n                    this.rotation.x = -limit;\n                }\n            }\n\n            //rotate, if quaternion is set and rotation was used\n            if (this.rotationQuaternion) {\n                var len = this.rotation.lengthSquared();\n                if (len) {\n                    Quaternion.RotationYawPitchRollToRef(this.rotation.y, this.rotation.x, this.rotation.z, this.rotationQuaternion);\n                }\n            }\n        }\n\n        // Inertia\n        if (needToMove) {\n            if (Math.abs(this.cameraDirection.x) < this.speed * Epsilon) {\n                this.cameraDirection.x = 0;\n            }\n\n            if (Math.abs(this.cameraDirection.y) < this.speed * Epsilon) {\n                this.cameraDirection.y = 0;\n            }\n\n            if (Math.abs(this.cameraDirection.z) < this.speed * Epsilon) {\n                this.cameraDirection.z = 0;\n            }\n\n            this.cameraDirection.scaleInPlace(this.inertia);\n        }\n        if (needToRotate) {\n            if (Math.abs(this.cameraRotation.x) < this.speed * Epsilon) {\n                this.cameraRotation.x = 0;\n            }\n\n            if (Math.abs(this.cameraRotation.y) < this.speed * Epsilon) {\n                this.cameraRotation.y = 0;\n            }\n            this.cameraRotation.scaleInPlace(this.inertia);\n        }\n\n        super._checkInputs();\n    }\n\n    protected _updateCameraRotationMatrix() {\n        if (this.rotationQuaternion) {\n            this.rotationQuaternion.toRotationMatrix(this._cameraRotationMatrix);\n        } else {\n            Matrix.RotationYawPitchRollToRef(this.rotation.y, this.rotation.x, this.rotation.z, this._cameraRotationMatrix);\n        }\n    }\n\n    /**\n     * Update the up vector to apply the rotation of the camera (So if you changed the camera rotation.z this will let you update the up vector as well)\n     * @returns the current camera\n     */\n    private _rotateUpVectorWithCameraRotationMatrix(): TargetCamera {\n        Vector3.TransformNormalToRef(this._defaultUp, this._cameraRotationMatrix, this.upVector);\n        return this;\n    }\n\n    private _cachedRotationZ = 0;\n    private _cachedQuaternionRotationZ = 0;\n    /** @hidden */\n    public _getViewMatrix(): Matrix {\n        if (this.lockedTarget) {\n            this.setTarget(this._getLockedTargetPosition()!);\n        }\n\n        // Compute\n        this._updateCameraRotationMatrix();\n\n        // Apply the changed rotation to the upVector\n        if (this.rotationQuaternion && this._cachedQuaternionRotationZ != this.rotationQuaternion.z) {\n            this._rotateUpVectorWithCameraRotationMatrix();\n            this._cachedQuaternionRotationZ = this.rotationQuaternion.z;\n        } else if (this._cachedRotationZ !== this.rotation.z) {\n            this._rotateUpVectorWithCameraRotationMatrix();\n            this._cachedRotationZ = this.rotation.z;\n        }\n\n        Vector3.TransformCoordinatesToRef(this._referencePoint, this._cameraRotationMatrix, this._transformedReferencePoint);\n\n        // Computing target and final matrix\n        this.position.addToRef(this._transformedReferencePoint, this._currentTarget);\n        if (this.updateUpVectorFromRotation) {\n            if (this.rotationQuaternion) {\n                Axis.Y.rotateByQuaternionToRef(this.rotationQuaternion, this.upVector);\n            } else {\n                Quaternion.FromEulerVectorToRef(this.rotation, this._tmpQuaternion);\n                Axis.Y.rotateByQuaternionToRef(this._tmpQuaternion, this.upVector);\n            }\n        }\n        this._computeViewMatrix(this.position, this._currentTarget, this.upVector);\n        return this._viewMatrix;\n    }\n\n    protected _computeViewMatrix(position: Vector3, target: Vector3, up: Vector3): void {\n        if (this.ignoreParentScaling) {\n            if (this.parent) {\n                const parentWorldMatrix = this.parent.getWorldMatrix();\n                Vector3.TransformCoordinatesToRef(position, parentWorldMatrix, this._globalPosition);\n                Vector3.TransformCoordinatesToRef(target, parentWorldMatrix, this._tmpTargetVector);\n                Vector3.TransformNormalToRef(up, parentWorldMatrix, this._tmpUpVector);\n                this._markSyncedWithParent();\n            } else {\n                this._globalPosition.copyFrom(position);\n                this._tmpTargetVector.copyFrom(target);\n                this._tmpUpVector.copyFrom(up);\n            }\n\n            if (this.getScene().useRightHandedSystem) {\n                Matrix.LookAtRHToRef(this._globalPosition, this._tmpTargetVector, this._tmpUpVector, this._viewMatrix);\n            } else {\n                Matrix.LookAtLHToRef(this._globalPosition, this._tmpTargetVector, this._tmpUpVector, this._viewMatrix);\n            }\n            return;\n        }\n\n        if (this.getScene().useRightHandedSystem) {\n            Matrix.LookAtRHToRef(position, target, up, this._viewMatrix);\n        } else {\n            Matrix.LookAtLHToRef(position, target, up, this._viewMatrix);\n        }\n\n        if (this.parent) {\n            const parentWorldMatrix = this.parent.getWorldMatrix();\n            this._viewMatrix.invert();\n            this._viewMatrix.multiplyToRef(parentWorldMatrix, this._viewMatrix);\n            this._viewMatrix.getTranslationToRef(this._globalPosition);\n            this._viewMatrix.invert();\n            this._markSyncedWithParent();\n        } else {\n            this._globalPosition.copyFrom(position);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public createRigCamera(name: string, cameraIndex: number): Nullable<Camera> {\n        if (this.cameraRigMode !== Camera.RIG_MODE_NONE) {\n            var rigCamera = new TargetCamera(name, this.position.clone(), this.getScene());\n            rigCamera.isRigCamera = true;\n            rigCamera.rigParent = this;\n            if (this.cameraRigMode === Camera.RIG_MODE_VR || this.cameraRigMode === Camera.RIG_MODE_WEBVR) {\n                if (!this.rotationQuaternion) {\n                    this.rotationQuaternion = new Quaternion();\n                }\n                rigCamera._cameraRigParams = {};\n                rigCamera.rotationQuaternion = new Quaternion();\n            }\n            return rigCamera;\n        }\n        return null;\n    }\n\n    /**\n     * @hidden\n     */\n    public _updateRigCameras() {\n        var camLeft = <TargetCamera>this._rigCameras[0];\n        var camRight = <TargetCamera>this._rigCameras[1];\n\n        this.computeWorldMatrix();\n\n        switch (this.cameraRigMode) {\n            case Camera.RIG_MODE_STEREOSCOPIC_ANAGLYPH:\n            case Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL:\n            case Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED:\n            case Camera.RIG_MODE_STEREOSCOPIC_OVERUNDER:\n            case Camera.RIG_MODE_STEREOSCOPIC_INTERLACED:\n                //provisionnaly using _cameraRigParams.stereoHalfAngle instead of calculations based on _cameraRigParams.interaxialDistance:\n                var leftSign = (this.cameraRigMode === Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED) ? 1 : -1;\n                var rightSign = (this.cameraRigMode === Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED) ? -1 : 1;\n                this._getRigCamPositionAndTarget(this._cameraRigParams.stereoHalfAngle * leftSign, camLeft);\n                this._getRigCamPositionAndTarget(this._cameraRigParams.stereoHalfAngle * rightSign, camRight);\n                break;\n\n            case Camera.RIG_MODE_VR:\n                if (camLeft.rotationQuaternion) {\n                    camLeft.rotationQuaternion.copyFrom(this.rotationQuaternion);\n                    camRight.rotationQuaternion.copyFrom(this.rotationQuaternion);\n                } else {\n                    camLeft.rotation.copyFrom(this.rotation);\n                    camRight.rotation.copyFrom(this.rotation);\n                }\n                camLeft.position.copyFrom(this.position);\n                camRight.position.copyFrom(this.position);\n\n                break;\n        }\n        super._updateRigCameras();\n    }\n\n    private _getRigCamPositionAndTarget(halfSpace: number, rigCamera: TargetCamera) {\n        var target = this.getTarget();\n        target.subtractToRef(this.position, TargetCamera._TargetFocalPoint);\n\n        TargetCamera._TargetFocalPoint.normalize().scaleInPlace(this._initialFocalDistance);\n        var newFocalTarget = TargetCamera._TargetFocalPoint.addInPlace(this.position);\n\n        Matrix.TranslationToRef(-newFocalTarget.x, -newFocalTarget.y, -newFocalTarget.z, TargetCamera._TargetTransformMatrix);\n        TargetCamera._TargetTransformMatrix.multiplyToRef(Matrix.RotationAxis(rigCamera.upVector, halfSpace), TargetCamera._RigCamTransformMatrix);\n        Matrix.TranslationToRef(newFocalTarget.x, newFocalTarget.y, newFocalTarget.z, TargetCamera._TargetTransformMatrix);\n\n        TargetCamera._RigCamTransformMatrix.multiplyToRef(TargetCamera._TargetTransformMatrix, TargetCamera._RigCamTransformMatrix);\n\n        Vector3.TransformCoordinatesToRef(this.position, TargetCamera._RigCamTransformMatrix, rigCamera.position);\n        rigCamera.setTarget(newFocalTarget);\n    }\n\n    /**\n     * Gets the current object class name.\n     * @return the class name\n     */\n    public getClassName(): string {\n        return \"TargetCamera\";\n    }\n}\n"]}